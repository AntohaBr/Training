// export const Wrapper  = () => {
//     return <Component city={"minsk"}/>
// }
// type PropsType = {
//     city: string
// }
// export const Component: React.FC<PropsType> = (props) => {
//     return <div>hello</div>
// }
// //
// // –í –∫–æ–¥–µ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–æ–ø—É—â–µ–Ω–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –æ—à–∏–±–∫–∞.
// //
// //     –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–æ—á–Ω–æ–≥–æ?                 –û–¢–í–ï–¢ Component ?
// ---------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// import ReactDOM from 'react-dom'
//
// export const YoutubeVideo = () => {
//     return <div>
//         <VideoHeader />
//         <VideoContent />
//         <VideoStatistics />
//     </div>
// }
// export const VideoHeader = () => {
//     return <div>
//         üòÄ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ
//     </div>
// }
// export const VideoContent = () => {
//     return <div>
//         üìº –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–µ–æ
//     </div>
// }
// export const VideoStatistics = () => {
//     return <div>
//         üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫–æ–≤
//     </div>
// }
//
// ReactDOM.render(<div><YoutubeVideo/></div>,
//     document.getElementById('root')
// );

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–≤–∏–¥–µ—Ç—å:
// üòÄ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ
// üìº –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–µ–æ
// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫–æ–≤
// ‚ùó –û—Ç–≤–µ—Ç –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –æ–±—ä—ë–º–æ–º –∫–æ–¥–∞                                –û–¢–í–ï–¢: <YoutubeVideo/>
// ---------------------------------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------------------------------
// type UserPropsType = {
//     name: string
//     description: string
// }
// export const User: React.FC<UserPropsType> = (props) => {
//     return <div>
//         <h1>–ò–º—è: {props.name}</h1>
//         //<div>–û–ø–∏—Å–∞–Ω–∏–µ: {props.description}</div>
//     </div>
// }

// //–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ –±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                        –û–¢–í–ï–¢: props.description
// --------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------
// type PropsType = {
//     city: string        // 'minsk'
//     country: string     // 'belarus'
//     coords?: string     // '53.917501,27.604851'
// }
//
// export const Wrapper1 = () => {
//     return
//     <PropsComponent1 city={'minsk'}country={'belarus'}/>    // —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
// }
//
// export const PropsComponent1: React.FC<PropsType> = (props) => {
//     return <div>hello</div>
// }
// // // –ß—Ç–æ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û –î–û–°–¢–ê–¢–û–ß–ù–û –Ω—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ 8 (c—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π), —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏      –û–¢–í–ï–¢: country={'belarus'}
// ------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------
// type PagePropsType = {
//     age: number
//     name: string
//     avatarUrl: string
// }
// const Page: React.FC<PagePropsType> = (props) => {
//     return <User a={props.age} n={props.name} />
// }
// type UserPropsType = {
//     a: number
//     n: string
// }
// export const User: React.FC<UserPropsType> = (props) => {
//     return <div> name: {props.n}, age: {props.a}</div>
// }
//
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx –∏ yyy?
// // –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: blabla onClick(props)           –û–¢–í–ï–¢: props.age props.name
// --------------------------------------------------------------------------------------------
//

// -----------------------------------------------------------------------------------------------
// type NewsType = {
//     title: string
//     author: string
// }
// type ArticleType = {
//     title: string
//     date: string
//     text: string
// }
// type PagePropsType = {
//     news: NewsType[]
//     mainArticle: ArticleType
// }
// export const Page: React.FC<PagePropsType> = (props) => {
//     return <div>
//         <article>
//             <h1>–ù–∞–∑–≤–∞–Ω–∏–µ: {props.mainArticle.title}</h1>
//             <div>{props.mainArticle.date}</div>
//             <div>{props.mainArticle.text}</div>
//         </article>
//         <aside>Articles:
//             <ul>
//                 {props.news.map(n => <li>{n.title}, {n.author}</li>)}
//             </ul>
//         </aside>
//     </div>
// }
//
// //
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY? –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:
// // car user                                                               –û–¢–í–ï–¢: mainArticle mainArticle mainArticle
// // ----------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------
//
// import ReactDOM from 'react-dom'
//
// type UserWalletType = {
//     title: string
//     amount: number
// }
// type UserWalletPropsType = {
//     wallet: UserWalletType
// }
//
// export const UserWallet: React.FC<UserWalletPropsType> = (props) => {
//     return <div>title: {props.wallet.title}, amount: {props.wallet.amount}</div>
// }
//
// export const UserMoney = () => {
//     const wallets = [
//         {title: 'bitcoin', amount: 1},
//         {title: '$', amount: 100}
//     ]
//
//     return <div>
//         <UserWallet wallet={wallets[0]} />
//         <UserWallet wallet={wallets[1]} />
//     </div>
// }
//
// ReactDOM.render(<UserMoney />,
//     document.getElementById('root')
// );
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx –∏ yyy, —á—Ç–æ–±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç UserMoney –æ—Ç–æ–±—Ä–∞–∑–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤—É—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö (bitcoin –∏ $)?
// //
// //     –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: props.x wallets                –û—Ç–≤–µ—Ç: wallets[0] wallets[1]
// // ----------------------------------------------------------------------------------------------------


// --------------------------------------------------------------------------------------------
// import ReactDOM from 'react-dom'
//
// export const VideoHeader = (props: {videoName: string}) => {
//     return <div>
//         üòÄ {props.videoName}
//     </div>
// }
// export const VideoContent = (props: {videoContent: string}) => {
//     return <div>
//         üìº <a href={props.videoContent}>{props.videoContent}</a>
//     </div>
// }
// export const VideoDescription = (props: {videoDescription: string}) => {
//     return <div>
//         üìë {props.videoDescription}
//     </div>
// }
//
// export const YoutubeVideo = (props: any) => {
//     return <div>
//         <VideoHeader videoName={props.video.title} />
//         <VideoContent videoContent={props.video.link} />
//         <VideoDescription videoDescription={props.video.description} />
//     </div>
// }
//
// export const App = () => {
//     const video = {
//         title: 'Samurai way',
//         link: 'https://www.youtube.com/watch?v=gb7gMluAeao&list=PLcvhF2Wqh7DNVy1OCUpG3i5lyxyBWhGZ8',
//         description: 'Best free react-course'
//     }
//
//     return <YoutubeVideo video={video} />
// }
//
// ReactDOM.render(<App />,
//     document.getElementById('root')
// );

// –û–¢–í–ï–¢: videoName={props.video.title} videoContent={props.video.link} videoDescription={props.video.description}

// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx yyy zzz, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?
// //     –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä: a={12} ccc={video.id} d={'hello'}
// -----------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------
// import ReactDOM from 'react-dom'
//
// const CrazyButton = (props: any) => {
//
//     const style = {
//         color: props.fontColor,
//         backgroundColor: props.bgColor
//     }
//
//     return <button style={style}>
//         {props.title}
//     </button>
// }
//
// export const App = () => {
//     return <div>
//         <CrazyButton title={'delete'} fontColor={'white'} bgColor={'red'}/>
//         <CrazyButton title={'add'} fontColor={'white'} bgColor={'green'}/>
//     </div>
// }
//
// ReactDOM.render(<App/>,
//     document.getElementById('root')
// )
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX YYY ZZZ? –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.                –û–¢–í–ï–¢: fontColor bgColor title
// ----------------------------------------------------------------------------------------------------
//
// -------------------------------------------------------------------------------------------------------
// import ReactDOM from 'react-dom'
//
// const Son = (props: any) => {
//     return <div>
//         I am son. My name is {props.name}
//     </div>
// }
//
// const Father = (props: any) => {
//     return <div>
//         I am father. My name is {props.name}
//         <Son name={props.sonName} />
//     </div>
// }
//
// const Granny = (props: any) => {
//     return <div>
//         I am granny. My name is {props.name}
//         <Father name={props.fatherName} sonName={props.sonName} />
//     </div>
// }
//
// export const App = () => {
//     return <div>
//         <Granny name={'–ë–∞–±—É–ª—è'} fatherName={'–ë–∞—Ç—è'} sonName={'–°—ã–Ω'}/>
//     </div>
// }
//
// ReactDOM.render(<App/>,
//     document.getElementById('root')
// )
//
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX YYY ZZZ? –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª              –û–¢–í–ï–¢: name fatherName sonName
// -----------------------------------------------------------------------------------------------------------

// –≠–ö–ó–ê–ú–ï–ù –ü–û–ú–ï–ù–ï–î–ï–õ–¨–ù–ò–ö 2

// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const results = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     const users = results[0]
//     const setUsers = results[1]
//
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// // –ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ —É–∫–∞–∑–∞—Ç—å –≤–º–µ—Å—Ç–æ "any" –ø—Ä–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å—Ç—ç–π—Ç–∞?               –û–¢–í–ï–¢: Array<string>


// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
// console.log(typeof useState)
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList />, document.getElementById('root')
// );

// // –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: typeof useState?                                       –û–¢–í–ï–¢: function
//
//
//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const results = useState<Array<string>>(["Bob", "Alex", "Ann"])
//
//     const users = results[0]
//     const setUsers = results[1]
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );

// // –ß–µ–º—É —Ä–∞–≤–Ω–æ results.length?                                                  –û–¢–í–ï–¢:   2
//
//
//

// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     console.log(Array.isArray(users))
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// // –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: Array.isArray(users)?                                  –û–¢–í–ï–¢: true
//
//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     console.log(typeof setUsers)
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
//  );
// // –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: typeof setUsers?                                       –û–¢–í–ï–¢: function
//
//
//
//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 { users.–•–•–•(user => <li>{user}</li> )}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// // –ß—Ç–æ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ –•–•–•, —á—Ç–æ–±—ã –∫–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–ª?                             –û–¢–í–ï–¢:  map
//


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     const getUser = (user: string) => <li>{user}</li>
//     const usersList = users.map(getUser)
//
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 {usersList}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// //
// // –ß—Ç–æ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–ª?                               –û–¢–í–ï–¢: getUser
// // ‚ùó –û—Ç–≤–µ—Ç –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –æ–±—ä—ë–º–æ–º –∫–æ–¥–∞
//


// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     const getUser = (user: string) => <li>{user}</li>
//     const usersList = users.map(getUser)
// console.log(Array.isArray(usersList))
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 {usersList}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// // –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: Array.isArray(usersList)?                   –û–¢–í–ï–¢: true
//
//
//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     const getUser = (user: string) => <li>{user}</li>
// console.log(typeof getUser)
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 {users.map(getUser)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// // –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: typeof getUser?                            –û–¢–í–ï–¢: function
//
//


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>User {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const state = [
//         {id: 1, name: "Bob", age: 34},
//         {id: 2, name: "Alex", age: 25},
//         {id: 3, name: "Ann", age: 30},
//         {id: 4, name: "John", age: 23},
//     ]
//     const users = [
//         {id: 1, userName: "Bob", age: 34},
//         {id: 2, userName: "Alex", age: 25},
//         {id: 3, userName: "Ann", age: 30},
//         {id: 4, userName: "John", age: 23},
//     ]
//
//     const [usersList, setUsersList] = useState<Array<UserType>>([])
//     return (
//         <main>
//             <h5>User list:</h5>
//             <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// // –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?
// // ‚ùó –û—Ç–≤–µ—Ç –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –æ–±—ä—ë–º–æ–º –∫–æ–¥–∞                       –û–¢–í–ï–¢:[]


// -----------------------------------------------------------------------------------------------------------

//                                               –≠–ö–ó–ê–ú–ï–ù –ü–û–ú–ï–ù–ï–î–ï–õ–¨–ù–ò–ö 3


// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ–π?
// import React, {useState} from 'react';
// // // // import ReactDOM from 'react-dom';
// // // // import './index.css';
// // // //
// // // // type UserType = {
// // // //     id: number
// // // //     name: string
// // // //     age: number
// // // // }
// // // //
// // // // function User(props: UserType) {
// // // //     return (
// // // //         <li>Student {props.name}: {props.age} y.o.</li>
// // // //     )
// // // // }
// // // //
// // // // function UsersList() {
// // // //     const data: Array<UserType> = [
// // // //         {id: 1, name: "Bob", age: 34},
// // // //         {id: 2, name: "Alex", age: 29},
// // // //         {id: 3, name: "Ann", age: 25},
// // // //         {id: 4, name: "John", age: 36},
// // // //     ]
// // // //     const [users, setUsers] = useState<Array<UserType>>(data)
// // // //     return (
// // // //         <main>
// // // //             <h4>User list:</h4>
// // // //             <ul>
// // // //                 {
// // // //                     users.map(u => <User key={u.id}
// // // //                                          id={u.id}
// // // //                                          name={u.name}
// // // //                                          age={u.age}
// // // //                         />
// // // //                     )
// // // //                 }
// // // //             </ul>
// // // //         </main>
// // // //     )
// // // // }
// // // //
// // // // ReactDOM.render(
// // // //     <UsersList/>, document.getElementById('root')
// // // // );
// // // //
// // // //                                                                          –û–¢–í–ï–¢ key

//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>Student {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 34},
//         {id: 2, name: "Alex", age: 29},
//         {id: 3, name: "Ann", age: 25},
//         {id: 4, name: "John", age: 36},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 { users.map(u => <User key={u.id} {...xxxxx} />) }
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                                       –û–¢–í–ï–¢:


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>User {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç:
//     // const olderThen25Users = users.xxx(u => u.age > 25)
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 { olderThen25Users.map(u => <User key={u.id} {...u}/>)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                                –û–¢–í–ï–¢:  filter


// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>User {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç:
//     const getOlderThen25Users = (u:UserType>) => u.age > 25
//     // const olderThen25Users = users.filter(getOlderThen25Users)
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 { olderThen25Users.map(u => <User key={u.id} {...u}/>)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                          –û–¢–í–ï–¢: UserType


// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>User {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç:
//     const getOlderThen25Users = (u: UserType) => u.age > 25
//     const olderThen25Users = users.filter(getOlderThen25Users)
//     console.log(Array.isArray(olderThen25Users))
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 { olderThen25Users.map(u => <User key={u.id} {...u}/>)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: Array.isArray(olderThen25Users)                    –û–¢–í–ï–¢:  true


// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// type UserPropsType = UserType & {
//     deleteUser: (id: number) => void
// }
//
// function User(props: UserPropsType) {
//     const deleteUser = () => props.deleteUser(props.id)
//     return (
//         <li>
//             <button onClick={deleteUser}>x</button>
//             User {props.name}: {props.age} y.o.
//         </li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     const deleteUser = (userID: number) => {
//         const filteredUsers = users.filter(u => u.id !== userID)
//         setUsers(xxx)
//     }
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 {users.map(u => <User
//                     key={u.id}
//                     {...u}
//                     deleteUser={deleteUser}
//                 />)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                     –û–¢–í–ï–¢: filteredUsers


// import React, {MouseEventHandler} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Button() {
//     return <button onClick={()=>alert()}>Click</button>
// }
//
//
// ReactDOM.render(
//     <Button/>, document.getElementById('root')
// );

// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö,
// —á—Ç–æ –±—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—è–≤–∏–ª—Å—è –ø—É—Å—Ç–æ–π alert –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–Ω–æ–ø–∫–µ?          –û–¢–í–ï–¢: ()=>alert()

// import React, {MouseEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Button() {
//     const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {
//         console.log((typeof e) === MouseEvent<HTMLButtonElement>)
//     }
//     return <button onClick={onClickHandler} >Click</button>
// }
//
//
// ReactDOM.render(
//     <Button/>, document.getElementById('root')
// );

// –ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞?
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ –±—ã –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–ª–æ true?


// import React, {useState, MouseEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Button() {
//     const [tagName, setTagName] = useState<string>()
//     const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {
//         setTagName(e.currentTarget.tagName)
//     }
//     return (
//         <>
//             <p>{tagName}</p>
//             <button onClick={onClickHandler} >
//                 <span>Click</span>
//             </button>
//         </>
//     )
// }
//
// ReactDOM.render(
//     <Button/>, document.getElementById('root')
// );

// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ –±—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—è–≤–∏–ª—Å—è —Ç–µ–∫—Å—Ç BUTTON?       –û–¢–í–ï–¢: currentTarget


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// type UserPropsType = UserType & {
//     deleteUser: (id: number) => void
// }
//
// function User(props: UserPropsType) {
//     return (
//         <li>
//             <button onClick={()=>props.deleteUser(props.id)}>x</button>
//             User {props.name}: {props.age} y.o.
//         </li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     const deleteUser = (userID: number) => {
//         setUsers(users.filter(u => u.id !== userID))
//     }
//     return (
//         <main>
//             <h4>Users list:</h4>
//             <ul>
//                 {users.map(u => <User
//                     key={u.id}
//                     {...u}
//                     deleteUser={deleteUser}
//                 />)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –í —Ç–∏–ø–µ UserPropsType —É —Ñ—É–Ω–∫—Ü–∏–∏ deleteUser –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —É–∫–∞–∑–∞–Ω —Ç–∏–ø "any".      –û–¢–í–ï–¢: number
// –ö–∞–∫–æ–π —Ç–∏–ø –±—ã–ª–æ –±—ã —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ?


// -----------------------------------------------------------------------------------------------------------

//                                               –≠–ö–ó–ê–ú–ï–ù –ü–û–ú–ï–ù–ï–î–ï–õ–¨–ù–ò–ö 4

// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// type UserPropsType = UserType & {
//     deleteUser: (id: number) => void
// }
//
// function User(props: UserPropsType) {
//     return (
//         <li>
//             <button onClick={() => props.deleteUser(props.id)}>x</button>
//             User {props.name}: {props.age} y.o.
//         </li>
//     )
// }

/*function UsersList() {
    const data: Array<UserType> = [
        {id: 1, name: "Bob", age: 25},
        {id: 2, name: "Alex", age: 28},
        {id: 3, name: "Ann", age: 23},
        {id: 4, name: "John", age: 30},
    ]
    const [users, setUsers] = useState<Array<UserType>>(data)
    const deleteUser = (userID: number) => {
        const filteredUsers = users.filter(u => u.id !== userID)
        setUsers(filteredUsers)
    }
    return (
        <main>
            <h4>User list:</h4>
            <ul>
                {users.map(u => <User
                    key={u.id}
                    {...u}
                    deleteUser={deleteUser}
                />)}
            </ul>
        </main>
    )
}

ReactDOM.render(
    <UsersList/>, document.getElementById('root')
);*/
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                     –û–¢–í–ï–¢: props.id

//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// type UserPropsType = UserType & {
//     deleteUser: (id: number) => void
// }
//
// function User(props: UserPropsType) {
//     const deleteUser = () => props.deleteUser(props.id)
//     return (
//         <li>
//             <button onClick={deleteUser}>Delete</button>
//             User {props.name}: {props.age} y.o.
//         </li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     const deleteUser = (userID: number) => {
//         const updatedUsers = users.filter(u => u.id !== userID)
//         setUsers(updatedUsers)
//     }
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 {users.map(u => <User
//                     key={u.id}
//                     {...u}
//                     deleteUser={deleteUser}    //xxx
//                 />)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );

// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                            –û–¢–í–ï–¢: deleteUser


//
// import React, {useState, MouseEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Post() {
//     const onClickHandler = (e: MouseEvent<HTMLAnchorElement>) => {
//         e.preventDefault()   // xxx
//         alert("–õ–µ—Ç–∏–º-–±–æ–º–±–∏–º!!!")
//     }
//     return (
//         <div>
//             <article>
//                 <h4>–ö–∞–∫ –¥–µ–ª–∞, –±—Ä–∞—Ç–∞–Ω?</h4>
//                 <p>
//                     –í–∏–∂—É, —á—Ç–æ –Ω–µ–ø–ª–æ—Ö–æ. –î–∞–≤–∞–π, —Ç—Ä—É–¥–∏—Å—å )))
//                     Google –∂–¥—ë—Ç —Ç–µ–±—è –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º —Ä–∞–±—Å—Ç–≤–µ!
//                     C—Ç–∞–≤—å –ª–∞–π–∫ –∏ –ø–æ–ª–µ—Ç–µ–ª–∏!!!
//                 </p>
//                 <a href={"https://www.youtube.com/"}
//                    onClick={onClickHandler}
//                 >–í —ç—Ç–æ–º –º–µ—Å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...</a>
//             </article>
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <Post/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã –í–∞—Å –Ω–µ –Ω–∞–ø—Ä–∞–≤–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Youtube
// –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ?                                                             –û–¢–í–ï–¢: e.preventDefault()


//
// import React, {useState, MouseEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function AuthForm() {
//     const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {
//         e.preventDefault()   //xxx
//         alert()
//     }
//     return (
//         <form>
//             <div>
//                 <label style={{padding: "10px 0"}}>
//                     Name:
//                     <input type={"email"} name={"email"}/>
//                 </label>
//             </div>
//             <div>
//                 <label style={{padding: "10px 0"}}>
//                     Password:
//                     <input type={"password"} name={"password"}/>
//                 </label>
//             </div>
//             <button
//                 onClick={onClickHandler}
//                 type={"submit"}>
//                 Log in
//             </button>
//         </form>
//     )
// }
//
// ReactDOM.render(
//     <AuthForm/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã                          –û–¢–í–ï–¢: e.preventDefault()
// –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª–∞—Å—å
// –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–Ω–æ–ø–∫–µ?


// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function User() {
//     const [userName, setUserName] = useState<string>("")
//     const onChangeHandler = (e:ChangeEvent<HTMLInputElement> )=> setUserName(e.currentTarget.value)
//     return (
//         <div>
//             <p>{userName}</p>
//             <input
//                 onChange={onChangeHandler}
//             />
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <User/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å
// –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏?                                                          ChangeEvent<HTMLInputElement>


// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function User() {
//     const [userName, setUserName] = useState<string>("")
//     return (
//         <div>
//             <p>{userName}</p>
//             <input
//                 value={userName}      // xxx
//                 onChange={(e) => setUserName(e.currentTarget.value)}
//             />
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <User/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã –∏–Ω–ø—É—Ç –±—ã–ª –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º?             –û–¢–í–ï–¢:value={userName}

//
// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function User() {
//     const [userName, setUserName] = useState<string>("")
//     const [text, setText] = useState<string>("")
//     const onChangeHandler = (e: ChangeEvent<HTMLInputElement> )=> setUserName(e.currentTarget.value)
//     return (
//         <div>
//             <input
//                 value={userName}
//                 onChange={onChangeHandler}
//                 onBlur={()=> {
//                     setUserName("")
//                     // xxx
//                     setText(userName)
//                 }}
//             />
//             <p>{text}</p>
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <User/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö,
// —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ –æ—á–∏—â–∞–ª–æ—Å—å?    –û–¢–í–ï–¢:  setUserName("")

//
// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Notes() {
//     const [newNote, setNewNote] = useState<string>("")
//     const [notes, setNotes] = useState<Array<string>>([])
//     const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement> )=>
//         setNewNote(e.currentTarget.value)
//     const addNote = () => {
//         setNotes([newNote, ...notes])
//         setNewNote("")
//     }
//     return (
//         <div>
//             <textarea
//                 value={newNote}
//                 onChange={onChangeHandler}
//                 xxx = {addNote}    // onClick –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
//             />
//             <h4>Notes:</h4>
//             <div>
//                 {notes.map((n,i )=> <p key={i}>{n}</p>)}
//             </div>
//         </div>
//     )
// }
//
//
// ReactDOM.render(
//     <Notes/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö,
// —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –∏–Ω–ø—É—Ç–æ–º —Ñ–æ–∫—É—Å–∞ –¥–æ–±–∞–≤–ª—è–ª–∞—Å—å –∑–∞–º–µ—Ç–∫–∞?               –û–¢–í–ï–¢:


//
// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Notes() {
//     const [newNote, setNewNote] = useState<string>("")
//     const [notes, setNotes] = useState<Array<string>>([])
//     const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement> )=>
//         setNewNote(e.currentTarget.value)
//     const addNote = () => {
//         setNotes([newNote, ...notes])
//         setNewNote("")
//     }
//     return (
//         <div>
//             <textarea
//                 value={newNote}
//                 onChange={onChangeHandler}
//                 onBlur={addNote}
//             />
//             <div>
//                 <button onClick={()=>setNotes([])}>Clear notes list</button>
//             </div>
//             <h4>Notes:</h4>
//             <div>
//                 {notes.map(n => <p>{n}</p>)}
//             </div>
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <Notes/>, document.getElementById('root')
// );
// // –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö,
// —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –æ—á–∏—â–∞–ª—Å—è?                –û–¢–í–ï–¢: ()=>setNotes([])

//-----------------------------------------------------------------------------------------------
//                                                 –≠–ö–ó–ê–ú–ï–ù 5

// type UserPropsType = {
//     name: string
//     description: string
// }
// export const User: React.FC<UserPropsType> = (props) => {
//     return <div>
//         <h1>–ò–º—è: {props.name}</h1>
//         //<div>–û–ø–∏—Å–∞–Ω–∏–µ: {props.description}</div>
//     </div>
// }

//–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ –±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?`                –û–¢–í–ï–¢:    props.description


//
// type PagePropsType = {
//     age: number
//     name: string
//     avatarUrl: string
// }
// const Page: React.FC<PagePropsType> = (props) => {
//     return <User a={props.age} n={props.name} />
// }
// type UserPropsType = {
//     a: number
//     n: string
// }
// export const User: React.FC<UserPropsType> = (props) => {
//     return <div>name: {props.n}, age: {props.a}</div>
// }

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx –∏ yyy?                                        props.age props.name
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: blabla onClick(props)

//
// type UserWalletType = {
//     title: string
//     amount: number
// }
// type UserWalletPropsType = {
//     wallet: UserWalletType
// }
//
// export const UserWallet: React.FC<UserWalletPropsType> = (props) => {
//     return <div>title: {props.wallet.title}, amount: {props.wallet.amount}</div>
// }
//
// export const UserMoney = () => {
//     const wallets = [
//         {title: 'bitcoin', amount: 1},
//         {title: '$', amount: 100}
//     ]
//
//     return <div>
//         <UserWallet wallet={wallets[0]} />
//         <UserWallet wallet={wallets[1]} />
//     </div>
// }


// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx –∏ yyy, —á—Ç–æ–±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç UserMoney –æ—Ç–æ–±—Ä–∞–∑–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤—É—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö (bitcoin –∏ $)?
//
//     –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: props.x wallets                   –û–¢–í–ï–¢: wallets[0] wallets[1]


//
// import ReactDOM from 'react-dom'
//
// const Son = (props: any) => {
//     return <div>
//         I am son. My name is {props.name}
//     </div>
// }
//
//
// const Father = (props: any) => {
//     return <div>
//         I am father. My name is {props.name}
//         <Son name={props.sonName} />
//     </div>
// }
//
// const Granny = (props: any) => {
//     return <div>
//         I am granny. My name is {props.name}
//         <Father name={props.fatherName} sonName={props.sonName} />
//     </div>
// }
//
// export const App = () => {
//     return <div>
//         <Granny XXX={'–ë–∞–±—É–ª—è'} YYY={'–ë–∞—Ç—è'} ZZZ={'–°—ã–Ω'}/>
//     </div>
// }
//
// ReactDOM.render(<App/>,
//     document.getElementById('root')
// )

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX YYY ZZZ? –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª             –û–¢–í–ï–¢: name fatherName sonName


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const results = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     const users = results[0]
//     const setUsers = results[1]
// console.log(results.length)
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );

// –ß–µ–º—É —Ä–∞–≤–Ω–æ results.length?                                            2


// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     console.log(typeof setUsers)
//     return (
//         <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: typeof setUsers?                                 –û–¢–í–ï–¢: function

// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>User {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const state = [
//         {id: 1, name: "Bob", age: 34},
//         {id: 2, name: "Alex", age: 25},
//         {id: 3, name: "Ann", age: 30},
//         {id: 4, name: "John", age: 23},
//     ]
//     const users = [
//         {id: 1, userName: "Bob", age: 34},
//         {id: 2, userName: "Alex", age: 25},
//         {id: 3, userName: "Ann", age: 30},
//         {id: 4, userName: "John", age: 23},
//     ]
//
//     const [usersList, setUsersList] = useState<Array<UserType>>([])
//     return (
//         <main>
//             <h5>User list:</h5>
//             <p>–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?
// ‚ùó –ï—Å–ª–∏ –º—ã –æ—Ç–º–∞–ø–∏–º –º–∞—Å—Å–∏–≤, —Ç–æ –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// ‚ùó –û—Ç–≤–µ—Ç –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –æ–±—ä—ë–º–æ–º –∫–æ–¥–∞                                   –û–¢–í–ï–¢: []


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// function User(props: UserType) {
//     return (
//         <li>User {props.name}: {props.age} y.o.</li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç:
//     const olderThen25Users = users.filter(u => u.age > 25)
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 { olderThen25Users.map(u => <User key={u.id} {...u}/>)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                     filter


//
// import React, {MouseEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Button() {
//     const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {
//         console.log((typeof e) === xxx)
//     }
//     return <button onClick={onClickHandler} >Click</button>
// }
//
//
// ReactDOM.render(
//     <Button/>, document.getElementById('root')
// );

// –ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞?
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ –±—ã –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–ª–æ true?


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     age: number
// }
//
// type UserPropsType = UserType & {
//     deleteUser: (id: number) => void
// }
//
// function User(props: UserPropsType) {
//     return (
//         <li>
//             <button onClick={() => props.deleteUser(props.id)}>x</button>
//             User {props.name}: {props.age} y.o.
//         </li>
//     )
// }
//
// function UsersList() {
//     const data: Array<UserType> = [
//         {id: 1, name: "Bob", age: 25},
//         {id: 2, name: "Alex", age: 28},
//         {id: 3, name: "Ann", age: 23},
//         {id: 4, name: "John", age: 30},
//     ]
//     const [users, setUsers] = useState<Array<UserType>>(data)
//     const deleteUser = (userID: number) => {
//         const filteredUsers = users.filter(u => u.id !== userID)
//         setUsers(filteredUsers)
//     }
//     return (
//         <main>
//             <h4>User list:</h4>
//             <ul>
//                 {users.map(u => <User
//                     key={u.id}
//                     {...u}
//                     deleteUser={deleteUser}
//                 />)}
//             </ul>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ xxx, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª?                        –û–¢–í–ï–¢: props.id


//
// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function User() {
//     const [userName, setUserName] = useState<string>("")
//     return (
//         <div>
//             <p>{userName}</p>
//             <input
//                 // xxx
//                 onChange={(e) => setUserName(e.currentTarget.value)}
//             />
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <User/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã –∏–Ω–ø—É—Ç –±—ã–ª –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º?                value={userName}


// import React, {useState, MouseEvent, ChangeEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Notes() {
//     const [newNote, setNewNote] = useState<string>("")
//     const [notes, setNotes] = useState<Array<string>>([])
//     const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement> )=>
//         setNewNote(e.currentTarget.value)
//     const addNote = () => {
//         setNotes([newNote, ...notes])
//         setNewNote("")
//     }
//     return (
//         <div>
//             <textarea
//                 value={newNote}
//                 onChange={onChangeHandler}
//                 onBlur={addNote}
//             />
//             <div>
//                 <button
//                     onClick={xxxxx}
//                 >Clear notes list</button>
//             </div>
//             <h4>Notes:</h4>
//             <div>
//                 {notes.map(n => <p>{n}</p>)}
//             </div>
//         </div>
//     )
// }
//
// ReactDOM.render(
//     <Notes/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö,
// —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –æ—á–∏—â–∞–ª—Å—è?

// ----------------------------------------------------------------------------------------------------------
//                                                –í–¢–û–†–ù–ò–ö
//                                                –≠–ö–ó–ê–ú–ï–ù 1

// import React, {useState, MouseEvent} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function ColorButton() {
//     const [isColored, setIsColored] = useState<boolean>(false)
//     return (
//         <button
//             style={{ backgroundColor: `${ isColored === true ? "red": ""}`}}
//             onClick={()=>setIsColored(true)}
//         >
//             –ú–µ–Ω—è—é —Ü–≤–µ—Ç –ø–æ –∫–ª–∏–∫—É
//         </button>
//     )
// }
//
//
// ReactDOM.render(
//     <ColorButton/>, document.getElementById('root')
// );

// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –∫—Ä–∞—Å–Ω–æ–π?             –û–¢–í–ï–¢: isColored


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
// import {array, string} from "prop-types";
//
// function UsersList() {
//     const [users, setUsers] = useState<Array<string>>(["Bob", "Alex", "Ann"])
//     const getUser = (user: string, i: number) => <li key={i}>{user}</li>
//
//     const usersList = (users.length === 0)
//         ? <p>List is empty</p>
//         :  <ul>
//             { users.map(getUser)}
//         </ul>
//
//     return (
//         <main>
//             <button onClick={()=>setUsers([])}>Clear list</button>
//             <h4>User list:</h4>
//             {usersList}
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª  —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?       –û–¢–í–ï–¢: users.length


//
// import React, {useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function PasswordChecker() {
//     const [password, setPassword] = useState<string>("")
//     return (
//         <main>
//             <p>Your password must have more than 8 charters!</p>
//             <input
//                 placeholder={"Enter your password"}
//                 value={password}
//                 onChange={e => setPassword(e.currentTarget.value)}
//                 type={"password"}
//             />
//             { password.length < 9 && <p style={{color: "red"}}>The password is too short!</p>}
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <PasswordChecker/>, document.getElementById('root')
// );

// –ß—Ç–æ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ?             –û–¢–í–ï–¢: password.length


// import React, { ChangeEvent, useState } from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function LongCommentChecker() {
//     const minSizeComment = 5
//     const [isCommentReady, setIsCommentReady] = useState<boolean>(false)
//     const [comment, setComment] = useState<string>('')
//
//     const onClickSendComment = () => {
//         if (comment.length > minSizeComment) {
//             setComment('')
//         }
//     }
//     const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {
//         const newComment = e.currentTarget.value
//         if (newComment.length > minSizeComment) {
//             setIsCommentReady(true)
//         } else {
//             setIsCommentReady(false)
//         }
//         setComment(newComment)
//     }
//
//     return (
//         <main>
//             <textarea
//                 placeholder={'Your comment must have more than 5 charters'}
//                 value={comment}
//                 onChange={onChangeHandler}
//             />
//             <div>
//                 <button
//                     disabled={xxx}
//                     onClick={onClickSendComment}>
//                     Send comment
//                 </button>
//             </div>
//         </main>
//     )
// }
//
// ReactDOM.render(<LongCommentChecker/>, document.getElementById('root'));

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –≤–µ—Ä–Ω–æ:
// –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ disable, –∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
// (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤) –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è.
// ‚ùó –û—Ç–≤–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö), –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ


// import React, {ChangeEvent, useState} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// function Colorize() {
//
//     const [color, setColor] = useState<string>("black")
//     const colors = ["red", "yellow", "green", "blue", "violet", "chartreuse"]
//
//     const styles = {
//         width: "100px",
//         height: "100px",
//         borderRadius: "50%",
//         backgroundColor: "black"
//     }
//
//     const getColor = (colors: string[]) => {
//         const nextColor = colors[Math.floor(Math.random() * colors.length)]
//         return nextColor
//     }
//
//     return (
//         <main>
//             <div style={{...styles, backgroundColor: color}}/>
//             <div>
//                 <button
//                     onClick={() => setColor(getColor(colors))}
//                 >
//                     Get random color
//                 </button>
//             </div>
//         </main>
//     )
// }
//
// ReactDOM.render(
//     <Colorize/>, document.getElementById('root')
// );
// –ß—Ç–æ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫—Ä—É–≥ —Ä–∞–Ω–¥–æ–º–Ω–æ –º–µ–Ω—è–ª —Ü–≤–µ—Ç –ø–æ –∫–ª–∏–∫—É?        –û–¢–í–ï–¢: getColor(colors)


// import React, { ChangeEvent, useState } from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// type UserType = {
//     id: number
//     name: string
//     personalData: PersonalDataType
// }
// type PersonalDataType = {
//     gender: string
//     age: number
//     technologies: Array<TechnologiesType>
// }
// type TechnologiesType = 'HTML' | 'CSS' | 'React' | 'JS/TS' | 'Redux'
//
// function UsersList() {
//
//     const [users, setUsers] = useState<Array<UserType>>([
//         {
//             id: 1,
//             name: 'Bob',
//             personalData: {
//                 gender: 'male',
//                 age: 23,
//                 technologies: ['HTML', 'CSS', 'React', 'JS/TS', 'Redux']
//             }
//         },
//         {
//             id: 2,
//             name: 'Alex',
//             personalData: {
//                 gender: 'male',
//                 age: 21,
//                 technologies: ['HTML', 'CSS', 'React']
//             }
//         },
//         {
//             id: 3,
//             name: 'Ann',
//             personalData: {
//                 gender: 'female',
//                 age: 26,
//                 technologies: ['HTML', 'CSS', 'JS/TS']
//             }
//         },
//         {
//             id: 4,
//             name: 'Helen',
//             personalData: {
//                 gender: 'female',
//                 age: 31,
//                 technologies: ['HTML', 'CSS']
//             }
//         },
//         {
//             id: 5,
//             name: 'Donald',
//             personalData: {
//                 gender: 'male',
//                 age: 28,
//                 technologies: ['React', 'JS/TS', 'Redux']
//             }
//         },
//     ])
//
//
//     return <ul>
//         {users.map(u => {
//             return (
//                 u.personalData.technologies.length >= 5
//                     ? <li key={u.id}>
//                         {`User ${u.name}. ${u.personalData.age}. Ready to work.`}
//                     </li>
//                     : <li key={u.id}>
//                         {`User ${u.name}. ${u.personalData.age}. `}
//                     </li>)
//         })}
//     </ul>
// }
//
// ReactDOM.render(
//     <UsersList/>, document.getElementById('root')
// );
// –¢–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Å—Ç—ç–∫–µ –ø—è—Ç—å –∏ –±–æ–ª–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –¥–æ–ª–∂–Ω—ã –≤ —Å–ø–∏—Å–∫–µ
// –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω—ã, –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ –∫ —Ä–∞–±–æ—Ç–µ.
// –ß—Ç–æ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ?                        –û–¢–í–ï–¢: personalData.technologies

// ________________________________________________________________________________________________________________
//                                               –í–¢–û–†–ù–ò–ö –≠–ö–ó–ê–ú–ï–ù 2


//
/*type Student = {
    id: number
    name: string
}
type Students = Array<Student>
type Friends = {
    [key: string]: Array<string>
}

export const students: Students = [
    {id: 1, name: "Bob"},
    {id: 2, name: "Alex"},
    {id: 3, name: "Ann"},
    {id: 4, name: "Charley"},
]

export const friends: Friends = {
    1: ["Oliver", "Jack", "Oscar",],
    2: ["Jack", "Lewis", "Thomas",],
    3: ["William", "Michael", "Lewis",],
    4: ["Oscar", "James", "William",],

}*/
//      console.log(Array.isArray(friends))
//                                                                                      false

//–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞,
//–∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
//Id —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –∫ –º–∞—Å—Å–∏–≤—É –µ–≥–æ –¥—Ä—É–∑–µ–π.
//–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: Array.isArray(friends)?
//
//
//  type StudentType = {
//     id: number
//    name: string
//      age: number
//
//  }
//
//  type FriendsType = {
//      [key: string]: Array<string>
//  }
//
//
//  export const students: Array<StudentType> = [
//      {id: 1, name: "Bob", age: 34},
//      {id: 2, name: "Alex", age: 23},
//      {id: 3, name: "Ann", age: 25},
//      {id: 4, name: "Charley", age: 20},
//  ]
//
//
//  export const friends: FriendsType = {
//      1: ["Jack","Oliver", "Oscar",],
//      2: ["Jack", "Lewis", "Thomas",],
//     3: ["William",  "Lewis","Michael"],
//     4: ["Oscar", "Thomas", "William",],
//  }
//
// console.log(friends[students[1].id])
// console.log(friends[students[3].id])

//                                                                                         "Thomas"
// //–î–∞–Ω –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞,
// //–∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
// //Id —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –∫ –º–∞—Å—Å–∏–≤—É –µ–≥–æ –¥—Ä—É–∑–µ–π.
// //–ò–º–µ—é—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã students[1] –∏ students[3] –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π?
// //–ï—Å–ª–∏ –¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–µ –∏–º—è –æ–±—â–µ–≥–æ –¥—Ä—É–≥–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–µ false.
//


//
// type StudentType = {
//     id: number
//     name: string
// }
//
// type FriendsType = {
//     [key: string]: Array<string>
// }
//
// export const students: Array<StudentType> = [
//     {id: 1, name: "Bob"},
//     {id: 2, name: "Alex"},
//     {id: 3, name: "Ann"},
//     {id: 4, name: "Charley"},
// ]
//
// export const friends: FriendsType = {
//     1: ["Oliver", "Jack", "Oscar",],
//     2: ["Jack", "Lewis", "Thomas",],
//     3: ["William", "Michael", "Lewis",],
//     4: ["Oscar", "James", "William",],
// }
// console.log(friends[3][1])                                                                               "Michael"
//–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞,
//–∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
//Id —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –∫ –º–∞—Å—Å–∏–≤—É –µ–≥–æ –¥—Ä—É–∑–µ–π.
//–ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–µ–∂–∏—Ç —Ç—É—Ç:  friends[3][1]?


// type StudentType = {
//     id: number
//     name: string
// }
//
// type FriendsType = {
//     [key: string]: Array<string>
// }
//
// export const students: Array<StudentType> = [
//     {id: 1, name: "Bob"},
//     {id: 2, name: "Alex"},
//     {id: 3, name: "Ann"},
//     {id: 4, name: "Charley"},
// ]
//
// export const friends: FriendsType = {
//     1: ["Oliver", "Jack", "Oscar",],
//     2: ["Jack", "Lewis", "Thomas",],
//     3: ["William", "Michael", "Lewis",],
//     4: ["Oscar", "James", "William",],
// }
// //
// console.log(friends[students[1].id][2])                                 //"Thomas"
//
//–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞,
//–∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
//Id —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –∫ –º–∞—Å—Å–∏–≤—É –µ–≥–æ –¥—Ä—É–∑–µ–π.
//–ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–µ–∂–∏—Ç —Ç—É—Ç: friends[students[1].id][2]?


//
// type StudentType = {
//     id: number
//     name: string
// }
//
// type FriendsType = {
//     [key: string]: Array<String>
// }
//
// export const students: Array<StudentType> = [
//     {id: 1, name: "Bob"},
//     {id: 2, name: "Alex"},
//     {id: 3, name: "Ann"},
//     {id: 4, name: "Charley"},
// ]
//
// export const friends: FriendsType = {
//     1: ["Oliver", "Jack", "Oscar",],
//     2: ["Jack", "Lewis", "Thomas",],
//     3: ["William", "Michael", "Lewis",],
//     4: ["Oscar", "James", "William",],
// }
//  console.log(friends[students[0].id])                                          // –û–¢–í–ï–¢: undefined

//–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞,
//–∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
//Id —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –∫ –º–∞—Å—Å–∏–≤—É –µ–≥–æ –¥—Ä—É–∑–µ–π.
//–ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–µ–∂–∏—Ç —Ç—É—Ç: friends[students[0].id][3]?


// import React, {useState} from "react";
//
// type samuraiType = {
//     id: string
//     name: string
//     status: "online" | "offline"
// }
// type CourseNameType = "HTML"|"JS"|"React"|"Redux"|"HomeWorks"
// type CourseType = {
//     name: CourseNameType
//     mentor: string
//     isDone: boolean
// }
// type TechnologiesType = {
//     [userID: string]: Array<CourseType>
// }
//
// const samuraiID_1 = "64jf-87kg"
// const samuraiID_2 = "90lg-34ks"
// const samuraiID_3 = "12jm-05fd"
//
// export const samurai: Array<samuraiType> = [
//     {id: samuraiID_1, name: "Bob", status: "online"},
//     {id: samuraiID_2, name: "Alex", status: "offline"},
//     {id: samuraiID_3, name: "Ann", status: "offline"},
// ]
//
// export const technologies: TechnologiesType = {
//     [samuraiID_1]: [
//         {name: "HTML", mentor: "Svetlana", isDone: true},
//         {name: "JS", mentor: "Viktor", isDone: true},
//         {name: "React", mentor: "Dmitrij", isDone: false},
//         {name: "Redux", mentor: "Valera", isDone: false},
//         {name: "HomeWorks", mentor: "Ignat", isDone: true},
//     ],
//     [samuraiID_2]: [
//         {name: "HTML", mentor: "Svetlana", isDone: true},
//         {name: "JS", mentor: "Viktor", isDone: true},
//         {name: "React", mentor: "Dmitrij", isDone: true},
//         {name: "Redux", mentor: "Valera", isDone: false},
//         {name: "HomeWorks", mentor: "Ignat", isDone: true},
//     ],
//     [samuraiID_3]: [
//         {name: "HTML", mentor: "Svetlana", isDone: true},
//         {name: "JS", mentor: "Viktor", isDone: true},
//         {name: "React", mentor: "Dmitrij", isDone: false},
//         {name: "Redux", mentor: "Valera", isDone: false},
//         {name: "HomeWorks", mentor: "Ignat", isDone: false},
//     ],
// }
//
// export const updateCourseStatus = (samuraiID: string, name: CourseNameType, isDone: boolean) => {
//     return {...technologies,
//         [samuraiID]: technologies[samuraiID].map(c => c.name === name ? {...c, isDone} : c)
//     }
// }                                                                                                  –û–¢–í–ï–¢: samuraiID
// –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–∞–º—É—Ä–∞–µ–≤ –∏–∑ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ö—Ä–∞–Ω—è—â–∞—è –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö,
// –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º—É—Ä–∞–π —É–∂–µ –ø—Ä–æ—à—ë–ª, –∞ —Ç–∞–∫ –∂–µ –æ —Ç–µ—Ö –∫—É—Ä—Å–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –µ—â—ë –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏.
// –¢–∞–∫ –∂–µ –¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è updateCourseStatus,
// –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –∫—É—Ä—Å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Å–∞–º—É—Ä–∞–µ–º –∏–ª–∏ —Å–Ω—è—Ç—å —Ç–∞–∫—É—é –æ—Ç–º–µ—Ç–∫—É
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞?


// type StudentType = {
//     id: number
//     name: string
// }
// type Students = Array<StudentType>
// type Friends = {
//     [key: string]: Array<string>
// }
//
// export const students: Students = [
//     {id: 1, name: "Bob"},
//     {id: 2, name: "Alex"},
//     {id: 3, name: "Ann"},
//     {id: 4, name: "Charley"},
// ]
//
// export const friends: Friends = {
//     1: ["Oliver", "Jack", "Oscar",],
//     2: ["Jack", "Lewis", "Thomas",],
//     3: ["William", "Michael", "Lewis",],
//     4: ["Oscar", "James", "William",],
// }
//
// console.log(Array.isArray(students))                                        –û–¢–í–ï–¢:true

// _________________________________________________________________________________________________________________
//                                              –í–¢–û–†–ù–ò–ö –≠–ö–ó–ê–ú–ï–ù 3

// type StudentType = {
//     id: number
//     name: string
// }
//
// type FriendsType = {
//     [key: string]: Array<string>
// }
//
// export const students: Array<StudentType> = [
//     {id: 1, name: "Bob"},
//     {id: 2, name: "Alex"},
//     {id: 3, name: "Ann"},
//     {id: 4, name: "Charley"},
// ]
//
// export const friends: FriendsType = {
//     1: ["Oliver", "Jack", "Oscar",],
//     2: ["Jack", "Lewis", "Thomas",],
//     3: ["William", "Michael", "Lewis",],
//     4: ["Oscar", "James", "William",],
// }
//
// const getMutualFriends = (st_1: StudentType, st_2: StudentType,) => {
//     const result: Array<string> = []
//     friends[st_1.id].forEach(f => friends[st_2.id].includes(f)? result.push(f): null)
//     return result
// }

//–î–∞–Ω –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞,
//–∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.                                    –û–¢–í–ï–¢:   st_2.id
// –¢–∞–∫ –∂–µ –¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è  getMutualFriends, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –Ω–∞–ª–∏—á–∏–µ –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π
// —É –¥–≤—É—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
//–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞ StudentType
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π,
//–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç—É.
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞?


//
// import React, {useState} from "react";
//
// type UserType = {
//     id: number
//     name: string
//     status: "online" | "offline"
// }
//
// type AddressType = {
//     country: string
//     city: string
//     email: string
// }
//
// type AdressesType = {
//     [userID: string]: AddressType
// }
//
//
// const users: Array<UserType> = [
//     {id: 1, name: "Bob", status: "online"},
//     {id: 2, name: "Alex", status: "offline"},
//     {id: 3, name: "Ann", status: "offline"},
// ]
//
// export const addresses: AdressesType = {
//     1: {country: "Russia", city: "Moscow", email: "hey@email.com"},
//     2: {country: "Ukraine", city: "Kiev", email: "yo@send.ua"},
//     3: {country: "Belarus", city: "Minsk", email: "wow@gogo.ru"},
//
// }
//
// export const changeUserStatus = (userID: number, status: string) => {
//     return users.map(u => u.id === userID ? {...u, status} : u)
// }
// –î–∞–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ö—Ä–∞–Ω—è—â–∞—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.                   –û–¢–í–ï–¢: map
// –¢–∞–∫ –∂–µ –¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è changeUserStatus, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?


//
// import React, {useState} from "react";
//
// type UserType = {
//     id: number
//     name: string
//     status: "online" | "offline"
// }
//
// type AddressType = {
//     country: string
//     city: string
//     email: string
// }
//
// type AdressesType = {
//     [userID: string]: AddressType
// }
//
// const users: Array<UserType> = [
//     {id: 1, name: "Bob", status: "online"},
//     {id: 2, name: "Alex", status: "offline"},
//     {id: 3, name: "Ann", status: "offline"},
// ]
//
// const addresses: AdressesType = {
//     1: {country: "Russia", city: "Moscow", email: "hey@email.com"},
//     2: {country: "Ukraine", city: "Kiev", email: "yo@send.ua"},
//     3: {country: "Belarus", city: "Minsk", email: "wow@gogo.ru"},
//
// }
//
// const updateUserAddress = (userID: number, key: string, newValue: string) => {
//     return {...addresses,
//         [userID]: {...addresses[userID], [key]: newValue}
//     }
// }
// –î–∞–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ö—Ä–∞–Ω—è—â–∞—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.                     –û–¢–í–ï–¢: userID
// –¢–∞–∫ –∂–µ –¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è updateUserAddress,
// –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–æ–ª–µ –≤ –∞–¥—Ä–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: updateUserAddress(2, "city", "Dnepropetrovsk")
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?


// import React, {useState} from "react";
//
// type samuraiType = {
//     id: string
//     name: string
//     status: "online" | "offline"
// }
// type CourseNameType = "HTML"|"JS"|"React"|"Redux"|"HomeWorks"
// type CourseType = {
//     name: CourseNameType
//     mentor: string
//     isDone: boolean
// }
// type TechnologiesType = {
//     [userID: string]: Array<CourseType>
// }
//
// const samuraiID_1 = "64jf-87kg"
// const samuraiID_2 = "90lg-34ks"
// const samuraiID_3 = "12jm-05fd"
//
// export const samurai: Array<samuraiType> = [
//     {id: samuraiID_1, name: "Bob", status: "online"},
//     {id: samuraiID_2, name: "Alex", status: "offline"},
//     {id: samuraiID_3, name: "Ann", status: "offline"},
// ]
//
// export const technologies: TechnologiesType = {
//     [samuraiID_1]: [
//         {name: "HTML", mentor: "Svetlana", isDone: true},
//         {name: "JS", mentor: "Viktor", isDone: true},
//         {name: "React", mentor: "Dmitrij", isDone: false},
//         {name: "Redux", mentor: "Valera", isDone: false},
//         {name: "HomeWorks", mentor: "Ignat", isDone: true},
//     ],
//     [samuraiID_2]: [
//         {name: "HTML", mentor: "Svetlana", isDone: true},
//         {name: "JS", mentor: "Viktor", isDone: true},
//         {name: "React", mentor: "Dmitrij", isDone: true},
//         {name: "Redux", mentor: "Valera", isDone: false},
//         {name: "HomeWorks", mentor: "Ignat", isDone: true},
//     ],
//     [samuraiID_3]: [
//         {name: "HTML", mentor: "Svetlana", isDone: true},
//         {name: "JS", mentor: "Viktor", isDone: true},
//         {name: "React", mentor: "Dmitrij", isDone: false},
//         {name: "Redux", mentor: "Valera", isDone: false},
//         {name: "HomeWorks", mentor: "Ignat", isDone: false},
//     ],
// }
//
// export const updateCourseStatus = (samuraiID: string, name: CourseNameType, isDone: boolean) => {
//     return {...technologies,
//         [samuraiID]: technologies[samuraiID].map(c => c.name === name ? {...c, isDone} : c)
//     }
// }
// –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–∞–º—É—Ä–∞–µ–≤ –∏–∑ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ö—Ä–∞–Ω—è—â–∞—è –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö,                      –û–¢–í–ï–¢:   samuraiID
// –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º—É—Ä–∞–π —É–∂–µ –ø—Ä–æ—à—ë–ª, –∞ —Ç–∞–∫ –∂–µ –æ —Ç–µ—Ö –∫—É—Ä—Å–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –µ—â—ë –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏.
// –¢–∞–∫ –∂–µ –¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è updateCourseStatus,
// –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –∫—É—Ä—Å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Å–∞–º—É—Ä–∞–µ–º –∏–ª–∏ —Å–Ω—è—Ç—å —Ç–∞–∫—É—é –æ—Ç–º–µ—Ç–∫—É
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ —Ö—Ö—Ö, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?

// ____________________________________________________________________________________________________________
//                                                 –í–¢–û–†–ù–ò–ö –≠–ö–ó–ê–ú–ï–ù 4


//
// type ActionType = {
//     type: "SUM"|"SUB"|"MULT"|"DIV"
//     payload: number
// }
//
// export const calculator = (state: number, action: ActionType) => {
//     switch (action.type) {
//         case "SUM":
//             return state + action.payload
//         case "SUB":
//             return state - action.payload
//         case "DIV":
//             return state / action.payload
//         default:
//             return state
//     }
// }
//                                                                                          –û–¢–í–ï–¢: action.type
//–ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ –•–•–•, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è calculator —Ä–∞–±–æ—Ç–∞–ª–∞?


// type ActionType = {
//     type: "SUM"|"SUB"|"MULT"|"DIV"
//     payload: number
// }
//
// export const calculator = (state: number, action: ActionType): number => {
//     switch (action.type) {
//         case "SUM":
//             return state + action.payload
//         case "SUB":
//             return state - action.payload
//         case "DIV":
//             return state / action.payload
//         default:
//             return state
//     }
// }
//                                                                                          –û–¢–í–ï–¢: "MULT"
//–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫–æ–≥–æ action.type –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ calculator?


//
// type ActionType = {
//     type: "SUM"|"SUB"|"MULT"|"DIV"
//     payload: number
// }
//
// export const calculator = (state: number, action: ActionType): number => {
//     switch (action.type) {
//         case "SUM":
//             return state + action.payload
//         case "SUB":
//             return state - action.payload
//         case "DIV":
//             return state / action.payload
//         case "MULT":
//             return state * action.payload
//         default:
//             return state
//     }
// }
//                                                                                             –û–¢–í–ï–¢: type: "SUB"
// const result = calculator(10, {type: "SUB", payload: 5})
// console.log(result)
//–ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ –±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è result —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 5?

//
// type ActionType = {
//     type: "SUM"|"SUB"|"MULT"|"DIV"|"EXP"
//     payload: number
// }
//
// export const calculator = (state: number, action: ActionType): number => {
//     switch (action.type) {
//         case "SUM":
//             return state + action.payload
//         case "SUB":
//             return state - action.payload
//         case "DIV":
//             return state / action.payload
//         case "MULT":
//             return state * action.payload
//         case "EXP":
//             return state ** action.payload
//         default:
//             return state
//     }
// }
// const result = calculator(10, {type: "EXP", payload: 0})
// if (!(result - 1)){
//     console.log("IT-INCUBATOR")
// }
//                                                                                           –û–¢–í–ï–¢: type: "EXP"
//–ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ "IT-INCUBATOR"?


// type ActionType = {
//     type: "SUM"|"SUB"|"MULT"|"DIV"|"EXP"
//     payload: number
// }
//
// export const calculator = (state: number, action: ActionType): number => {
//     switch (action.type) {
//         case "SUM":
//             return state + action.payload
//         case "SUB":
//             return state - action.payload
//         case "DIV":
//             return state / action.payload
//         case "EXP":
//             return state ** action.payload
//         default:
//             return state
//     }
// }
// console.log(calculator(10, {type: "MULT", payload: 2}))                                         –û–¢–í–ï–¢: 10
//–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Ç–∞–∫–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: calculator(10, {type: "MULT", payload: 2})?


// type UserType = {
//     id: number
//     userName: string
//     email: string
//     password: string
// }
//
// type ChangeUserPasswordTypeAT = {
//     type: "CHANGE-USER-PASSWORD"
//     payload: {
//         id:number
//         newPassword:string
//     }
// }
//
// export const userReducer =
//     (state: UserType[], action: ChangeUserPasswordTypeAT): UserType[] => {
//         switch (action.type) {
//             case "CHANGE-USER-PASSWORD":
//                 return state.map(u =>
//                     u.id === action.payload.id
//                         ? {...u, password: action.payload.newPassword}
//                         : u)
//             default:
//                 return state
//         }
//     }
//                                                                               –û–¢–í–ï–¢:  id:number newPassword:string

//–ö–∞–∫–æ–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –≤–º–µ—Å—Ç–æ XXX –∏ YYY –≤ —Ç–∏–ø–µ //ChangeUserPasswordTypeAT, —á—Ç–æ –±—ã —Ä–µ–¥—å—é—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–ª?
//–í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: XXX  YYY

// _________________________________________________________________________________________________________________
//                                             –°–†–ï–î–ê –≠–ö–ó–ê–ú–ï–ù 1

/*
type Status = 'Stopped' | 'Playing' | 'Paused'
type StateType = {
    volume: number // in percents
    trackUrl: string // 'https://blabla.com/track01.mp3',
    currentPlayPosition: number // milliseconds,
    status: Status
}

export const playerReducer = (state: StateType, action: any) => {
    switch (action.type) {
        case XXX:
            return {
                ...state,
                trackUrl: action.url
            }
        default:
            return state
    }
}
                                                                                          –û–¢–í–ï–¢: 'TRACK-URL-CHANGED'
const muteTrackAC = () => ({type: 'TRACK-MUTED'})
const changeTrackAC = (url: string) => ({type: 'TRACK-URL-CHANGED', url})
const changeTrackPlayStatusAC = (status: Status) => ({type: 'TRACK-STATUS-CHANGED', status})
*/
//–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–º–µ—Å—Ç–æ XXX?


// type Status = 'Stopped' | 'Playing' | 'Paused'
// type StateType = {
//     volume: number // in percents
//     trackUrl: string // 'https://blabla.com/track01.mp3',
//     currentPlayPosition: number // milliseconds,
//     status: Status
// }
// export const playerReducer = (state: StateType, action: any) => {
//     switch (action.type) {
//         case 'TRACK-STATUS-CHANGED':
//             return {
//                 ...state,
//                 status: action.status
//             }
//         default:
//             return state
//     }
// }
//
// const muteTrackAC = () => ({type: 'TRACK-MUTED'})
// const changeTrackAC = (url: string) => ({type: 'TRACK-URL-CHANGED', url})
// const changeTrackPlayStatusAC = (status: Status) => ({type: 'TRACK-STATUS-CHANGED', status})
//
// const state: StateType = {
//     status: 'Stopped',
//     currentPlayPosition: 1213,
//     trackUrl: 'https://blabla.com/track01.mp3',
//     volume: 100
// }
//
// const newState = playerReducer(state, changeTrackPlayStatusAC('Paused'))
// console.log(newState.status === 'Paused')
//                                                                                 –û–¢–í–ï–¢:changeTrackPlayStatusAC('Paused')
//–ù–∞–ø–∏—à–∏—Ç–µ –≤–º–µ—Å—Ç–æ XXX –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ AC, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—ã–ª–æ true


// type Status = 'Stopped' | 'Playing' | 'Paused'
// type StateType = {
//     volume: number // in percents
//     trackUrl: string // 'https://blabla.com/track01.mp3',
//     currentPlayPosition: number // milliseconds,
//     status: Status
// }
// export const playerReducer = (state: StateType, action: any) => {
//     switch (action.type) {
//         case 'TRACK-VOLUME-CHANGED':
//             return {
//                 ...state,
//                 volume: action. volumeLevel
//             }
//         default:
//             return state
//     }
// }
//
// const muteTrackAC = () => ({type: 'TRACK-MUTED'})
// const changeVolumeAC = (volumeLevel: number) => ({type: 'TRACK-VOLUME-CHANGED', volumeLevel})
// const changeTrackAC = (url: string) => ({type: 'TRACK-URL-CHANGED', url})
// const changeTrackPlayStatusAC = (status: Status) => ({type: 'TRACK-STATUS-CHANGED', status})
//
// const state: StateType = {
//     status: 'Stopped',
//     currentPlayPosition: 1213,
//     trackUrl: 'https://blabla.com/track01.mp3',
//     volume: 100
// }
// const newState = playerReducer(state, changeVolumeAC(20))
// console.log(newState.volume === 20)
//                                                                                –û–¢–í–ï–¢: volume: action.volumeLevel
// –ù–∞–ø–∏—à–∏—Ç–µ –≤–º–µ—Å—Ç–æ XXX –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏ —É–≤–∏–¥–µ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ true.


// export const reducer = (state: any, action: any) => {
//     switch (action.type) {
//         case 'TRACK-LIKED':
//             return {
//                 ...state,
//                 [action.trackId]: {
//                     ...state[action.trackId],
//                     likesCount: state[action.trackId].likesCount + 1
//                 }
//             }
//         default:
//             return state
//     }
// }
//
// const likeTrackAC = (trackId: number) => ({type: 'TRACK-LIKED', trackId})
//
//
// const state = {
//     12: {id: 12, likesCount: 10},
//     14: {id: 14, likesCount: 2},
//     100: {id: 100, likesCount: 0},
// }
// const newState = reducer(state, likeTrackAC(14))
//
// console.log(newState[14].likesCount === 3)
//                                                                           –û–¢–í–ï–¢: action.trackId
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å true?
// ‚ùó –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ


//
// export const reducer = (state: any, action: any) => {
//     switch (action.type) {
//         case 'TRACK-ADDED':
//             return [{id:action.trackId, likesCount:0},...state]
//         default:
//             return state
//     }
// }
//
// const addTrackAC = (trackId: number) => ({type: 'TRACK-ADDED', trackId})
//
// const state = [
//     {id: 12, likesCount: 10},
//     {id: 14, likesCount: 2},
//     {id: 100, likesCount: 0}
// ]
// const newState = reducer(state, addTrackAC(300))
//
// console.log(newState[3].likesCount === 0)
// –û–¢–í–ï–¢: [{id:action.trackId, likesCount:0},...state]
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã —Ç—Ä–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å true?


// export const reducer = (state: any, action: any) => {
//     switch (action.type) {
//         case 'TRACK-DELETED':
//             return state.filter((track: any) => track.id != action.trackId )
//         default:
//             return state
//     }
// }
//
// const deleteTrackAC = (trackId: number) => ({type: 'TRACK-DELETED', trackId})
//
//
// const state = [
//     {id: 12, likesCount: 10},
//     {id: 14, likesCount: 2},
//     {id: 100, likesCount: 0}
// ]
// const newState = reducer(state, deleteTrackAC(14))
//
// console.log(newState.length === 2)
//                                                                  –û–¢–í–ï–¢: track.id != action.trackId

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å true?


// type StateType = {
//     volume: number // in percents
//     trackUrl: string // 'https://blabla.com/track01.mp3',
//     currentPlayPosition: number // milliseconds,
// }
//
// export const reducer = (state: StateType, action: any) => {
//     switch (action.type) {
//         case 'TRACK-URL-CHANGED':
//             return {
//                 ...state,
//                 trackUrl: action.url
//             }
//         case 'TRACK-MUTED':
//             return {
//                 ...state,
//                 volume: 0
//             }
//         case 'TRACK-REWOUND-TO-START':
//             return {
//                 ...state,
//                 currentPlayPosition: 0
//             }
//         default:
//             return state
//     }
// }
//                                                            –û–¢–í–ï–¢:  'TRACK-URL-CHANGED' 'TRACK-MUTED' 'TRACK-REWOUND-TO-START'
// const muteTrackAC = () => ({type: 'TRACK-MUTED'})
// const changeTrackAC = (url: string) => ({type: 'TRACK-URL-CHANGED', url})
// // –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å–ù–∞–ù–∞—á–∞–ª–æ:
// const rewindToStart = () => ({type: 'TRACK-REWOUND-TO-START'})

// –ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–º–µ—Å—Ç–æ XXX, YYY –∏ ZZZ?
// –û—Ç–≤–µ—Ç –¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:   'BLABLA' 'HEY–ù–ïY' 'HIPHOP'

// _____________________________________________________________________________________________________________
//                                               –°–†–ï–î–ê –≠–ö–ó–ê–ú–ï–ù 2

// import {combineReducers, createStore} from 'redux'
//
// let initialState = {items: [{name: 'Dimych'}, {name: 'Ignat'}]}
// const usersReducer = (state = initialState, action: any) => {
//     return state
// }
//
// const store = createStore(combineReducers({
//     users: usersReducer
// }))
//
// store.subscribe(() => {
//     console.log('state changed')
//  })
//
//  store.dispatch({type: 'ANY'})
//                                                                                           –û–¢–í–ï–¢: subscribe
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å 'state changed'?


// import {combineReducers, createStore} from 'redux'
//
// let initialState = {items: [{name: 'Dimych'}, {name: 'Ignat'}]}
// const usersReducer = (state = initialState, action: any) => {
//     return state
// }
//
// const store = createStore(combineReducers({
//     users: usersReducer
// }))
//
// store.subscribe(() => {
//     const state = store.getState()
//     console.log(state)
// })
//
// store.dispatch({type: 'ANY'})
//                                                                               –û–¢–í–ï–¢:store.getState()
//–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç?


// import {combineReducers, createStore} from 'redux'
// import ReactDOM from 'react-dom'
// import {Provider, useSelector} from 'react-redux'
// import React from 'react'
//
// let initialState = {items:
//         [
//             {id: 1, name: 'Dimych'},
//             {id: 2, name: 'Ignat'}
//         ]
// }
// const usersReducer = (state = initialState, action: any) => {
//     return state
// }
//
// let authInitialState = {login: 'Margo', settings: {theme: 'dark'}}
// const authReducer = (state = authInitialState, action: any) => {
//     return state
// }
//
// let rootReducer = combineReducers({
//     users: usersReducer,
//     auth: authReducer
// })
//
// const store = createStore(rootReducer)
// type RootStateType = ReturnType<typeof rootReducer>
//
// const selector = (state: RootStateType) => state.users.items
//
// const Users = () => {
//
//     const users = useSelector(selector)
//
//     return <ul>
//         {users.map(u => <li key={u.id}>{u.name}</li>)}
//     </ul>
// }
//
// ReactDOM.render(<div>
//         <Provider store={store}>
//             <Users/>
//         </Provider>
//     </div>,
//     document.getElementById('root')
// )

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤?                   –û–¢–í–ï–¢: useSelector(selector)


// import React, {useState, useReducer, useEffect} from 'react';
// import ReactDOM from 'react-dom';
// import './index.css';
//
// const changeCounter = (state: number, action: any): number => {
//     switch (action.type) {
//         case "INC_VALUE":
//             return state + 1
//         case "RESET":
//             return 0
//         case "DEC_VALUE":
//             return state - 1
//         default:
//             return state
//     }
// }
//
// function Counter() {
//     const [value, setValue] = useReducer(changeCounter, 0)
//     const [isCounter, setIsCounter] = useState(true)
//     const commonStyles: React.CSSProperties = {
//         border: "1px solid black",
//         margin: "100px auto",
//         width: "300px",
//         height: "150px",
//         textAlign: "center",
//     }
//     const btnStyles: React.CSSProperties = {
//         color: "white",
//         fontWeight: "bold",
//         backgroundColor: "darkgray",
//         borderRadius: "3px",
//         minWidth: "40px"
//     }
//
//     return (
//         <div style={commonStyles}>{
//             isCounter
//                 ? <div >
//                     <div style={{marginBottom: "20px"}}>
//                         <h2>{value}</h2>
//                         <button
//                             style={{...btnStyles, backgroundColor: "red"}}
//                             onClick={() => setIsCounter(false)}>OFF</button>
//                     </div>
//                     <button style={btnStyles} onClick={() => setValue({type: "INC_VALUE"})}>+</button>
//                     <button style={btnStyles} onClick={() => setValue({type: "RESET"})}>0</button>
//                     <button style={btnStyles} onClick={() => setValue({type: "DEC_VALUE"})}>-</button>
//
//                 </div>
//                 : <div style={{textAlign: "center"}}>
//                     <h2>Counter not working</h2>
//                     <button
//                         style={{...btnStyles, backgroundColor: "green"}}
//                         onClick={() => setIsCounter(true)}>ON</button>
//                 </div>
//         }
//         </div>
//     )
// }
//
//
// ReactDOM.render(
//     <Counter/>, document.getElementById('root')
// );                                                                                    //–û–¢–í–ï–¢: useReducer useState
// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª? –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.


//
// import React from 'react'
// import { createStore } from 'redux'
// import { Provider, useSelector, useDispatch } from 'react-redux'
// import ReactDOM from 'react-dom'
//
// type StudentType = {
//     id: number
//     name: string
//     age: number
// }
//
// const initState = {
//     students:
//         [
//             {id: 1, name: 'Bob', age: 23},
//             {id: 2, name: 'Alex', age: 22}
//         ] as Array<StudentType>
// }
// type AddStudentAT = {
//     type: 'ADD-STUDENT'
//     name: string
//     age: number
//     id: number
// }
//
// type InitialStateType = typeof initState
//
// const studentsReducer = (state: InitialStateType = initState, action: AddStudentAT): InitialStateType => {
//     switch (action.type) {
//         case 'ADD-STUDENT':
//             return {
//                 ...state,
//                 students: [...state.students, {
//                     name: action.name,
//                     age: action.age,
//                     id: action.id
//                 }]
//             }
//     }
//     return state
// }
//
// const appStore = createStore(studentsReducer)
// type RootStateType = ReturnType<typeof studentsReducer>
//
//
// const StudentList = () => {
//     const students = useSelector((state: RootStateType) => state.students)
//     return (
//         <ul>
//             {students.map(s => <li key={s.id}>{`${s.name}. ${s.age} years.`}</li>)}
//         </ul>
//     )
// }
// const App = () => {
//     return <StudentList/>
// }
//
// ReactDOM.render(<div>
//         <Provider store={appStore}>
//             <App/>
//         </Provider>
//     </div>,
//     document.getElementById('root')
// )                                                                               –û–¢–í–ï–¢: Provider store appStore

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, YYY –∏ ZZZ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤?


// import {createStore} from 'redux'
// import ReactDOM from 'react-dom'
// import {Provider, useSelector, useDispatch} from 'react-redux'
// import React from 'react'
//
// const students = {
//     students: [
//         {id: 1, name: 'Bob'},
//         {id: 2, name: 'Alex'},
//         {id: 3, name: 'Donald'},
//         {id: 4, name: 'Ann'},
//     ]
// }
// type RemoveStudentAT = {
//     type: "REMOVE-STUDENT"
//     id: number
// }
// const RemoveStudentAC = (id: number): RemoveStudentAT => ({
//     type: "REMOVE-STUDENT",
//     id
// })
//
// const studentsReducer = (state = students, action: RemoveStudentAT) => {
//     switch (action.type) {
//         case "REMOVE-STUDENT":
//             return {
//                 ...state,
//                 students: state.students.filter(s => s.id !== action.id)
//             }
//     }
//     return state
// }
//
// const store = createStore(studentsReducer)
// type RootStateType = ReturnType<typeof studentsReducer>
//
//
// const StudentList = () => {
//     const listItemStyles = {
//         width: "100px",
//         borderBottom: "1px solid gray",
//         cursor: "pointer",
//     }
//     const students = useSelector((state: RootStateType) => state.students)
//     const dispatch = useDispatch()
//     const studentsList = students.map(s => {
//         const removeStudent = () => {
//             dispatch(RemoveStudentAC(s.id))
//         }
//         return (
//             <li key={s.id}
//                 style={listItemStyles}
//                 onClick={removeStudent}>
//                 {s.name}
//             </li>)
//     })
//     return (
//         <ol>
//             {studentsList}
//         </ol>
//
//     )
// }
//
//
// ReactDOM.render(<div>
//         <Provider store={store}>
//             <StudentList/>
//         </Provider>
//     </div>,
//     document.getElementById('root')
// )
//                                                                                 –û–¢–í–ï–¢: dispatch RemoveStudentAC s.id
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, YYY –∏ ZZZ, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç
// —É–¥–∞–ª—è–ª—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
// _________________________________________________________________________________________________________
//                                                  –°–†–ï–î–ê –≠–ö–ó–ê–ú–ï–ù 3

// import React, {useCallback, useEffect, useState} from 'react'
// import ReactDOM from 'react-dom'
// export const TempManager = () => {
//    const [temp, setTemp] = useState(0)
//    const [seconds, setSeconds] = useState(0)
//    const resetTemp = useCallback(() => setTemp(0), [])
//    const increaseSeconds = () => setSeconds(seconds + 100)
//    return (
//        <>
//            <TempDisplay temp={temp} reset={resetTemp}/>
//            <div>
//                <p><b>–°–µ–∫—É–Ω–¥—ã:</b> {seconds} —Å</p>
//                <button onClick={increaseSeconds}>
//                    –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ 100 —Å–µ–∫—É–Ω–¥
//                </button>
//            </div>
//        </>
//    )
// }
//
// const TempDisplay = React.memo((props: any) => {
//     console.log('Render TempDisplay')
//   // useEffect(()=>{console.log('Render TempDisplay')},[TempDisplay])
//
//    return (
//        <div>
//            <p><b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b>: {props.temp} &#176;</p>
//            <button onClick={props.reset}>Reset</button>
//        </div>
//    )
// })
//
// ReactDOM.render(<TempManager/>, document.getElementById('root'))
////–ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ button) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TempDisplay
////—Ç–æ–∂–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è. –≠—Ç–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–±—ã—Ç–æ—á–Ω–æ–π.
////–ù–∞–π–¥–∏—Ç–µ –≤ —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫.                                  –û–¢–í–ï–¢: const resetTemp = useCallback(() => setTemp(0), [])
////–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//const increaseSeconds = useCallback(() => setSeconds(seconds + 100),[])   –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
//useEffect(()=>{console.log('Render TempDisplay')},[TempDisplay]) –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
////–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const increaseSeconds = () => setSeconds(seconds + 100)


// import React, { useCallback, useState } from 'react'
// import ReactDOM from 'react-dom'
//
// export const App = () => {
//     const [temp, setTemp] = useState(100)
//     const [seconds, setSeconds] = useState(0)
//
//     const resetTemp = useCallback(() => setTemp(0), [])
//
//     const incSec = useCallback(() => setSeconds(seconds + 1), [seconds])
//
//     return <>
//         <TempDisplay temp={temp} resetTemp={resetTemp}/>
//         <SecDisplay seconds={seconds} incSec={incSec}/>
//     </>
// }
// const TempDisplay = React.memo((props: any) => {
//     console.log('Render TempDisplay')
//     return (
//         <div style={{marginBottom: '10px'}} onClick={props.reset}>
//             <p>
//                 <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </b>{props.temp} &#176;
//             </p>
//             <button onClick={props.resetTemp}>–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫ 0</button>
//         </div>
//     )
// })
//
// const SecDisplay = React.memo((props: any) => {
//     console.log('Render SecDisplay')
//     return (
//         <div>
//             <p><b>–°–µ–∫—É–Ω–¥—ã:</b> {props.seconds} c </p>
//             <button style={{marginRight: '20px'}}
//                     onClick={props.incSec}>
//                 –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
//             </button>
//         </div>
//     )
// })
//
// ReactDOM.render(<App/>, document.getElementById('root'))

// –ü–æ—á–µ–º—É –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑) ?
// –ù–∞–π–¥–∏—Ç–µ –≤ —á–µ–º –ø—Ä–∏—á–∏–Ω–∞.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
//                                                                     –û–¢–í–ï–¢: const incSec = useCallback(() => setSeconds(seconds + 1), [seconds])
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const incSec = () => setSeconds(seconds + 1)


// import React, {useCallback, useEffect, useState} from 'react'
// import ReactDOM from 'react-dom'
//
// export const App = () => {
//     const [temp, setTemp] = useState(10)
//     const [seconds, setSeconds] = useState(100)
//
//     const increaseSeconds = () => setSeconds(seconds + 10)
//     const increaseTemp  = useCallback(() => setTemp(temp + 1),[temp])
//
//     return <>
//         <TempDisplay temp={temp} increaseTemp={increaseTemp}/>
//
//         <div>
//             <b>–°–µ–∫—É–Ω–¥—ã :</b> {seconds} —Å
//             <button style={{marginLeft: '15px'}}
//                     onClick={increaseSeconds}>
//                 –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
//             </button>
//         </div>
//     </>
// }
// const TempDisplay = React.memo((props: any) => {
//     console.log('Render TempDisplay')
//     return (
//         <div style={{marginBottom: '15px'}}
//              onClick={props.reset}>
//             <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {props.temp} &#176;
//             <button style={{marginLeft: '15px'}}
//                     onClick={props.increaseTemp}>
//                 –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ 1 –≥—Ä–∞–¥—É—Å
//             </button>
//         </div>
//     )
// })
//
// ReactDOM.render(<App/>, document.getElementById('root'));

// –ß—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å 2 —É—Å–ª–æ–≤–∏—è:
// 1) –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ 1 –≥—Ä–∞–¥—É—Å" —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–ª–∞—Å—å
// 2) –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TempDisplay –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥"
//                                                       –û–¢–í–ï–¢: useCallback(() => setTemp(temp + 1),[temp])
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: useEffect(() => setCounter(count + 1), [count])


// import React, {useCallback, useMemo, useState} from 'react'
// import ReactDOM from 'react-dom'
//
// type ButtonType = {
//     id: number
//     title: string
//     forAdminOnly: boolean
// }
// const buttons: ButtonType[] = [
//     {id: 1, title: 'delete', forAdminOnly: true},
//     {id: 2, title: 'update', forAdminOnly: true},
//     {id: 3, title: 'create', forAdminOnly: false},
// ]
//
// export const App = ({isAdmin}: { isAdmin: boolean }) => {
//
//     const [seconds, setSeconds] = useState(0)
//
//     const increaseSeconds = () => setSeconds(seconds + 10)
//
//     const correctButtons = useMemo(() => {
//         return buttons.filter(b => isAdmin ? true : !b.forAdminOnly)
//     }, [isAdmin])
//
//     return <>
//         <ButtonsPanel buttons={correctButtons}/>
//         <div>
//             <p>
//                 <b>–°–µ–∫—É–Ω–¥—ã: {seconds}</b>
//             </p>
//             <button onClick={increaseSeconds}>
//                 –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
//             </button>
//         </div>
//     </>
// }
//
// const ButtonsPanel = React.memo((props: { buttons: Array<ButtonType> }) => {
//     console.log('Render ButtonsPanel')
//     return (
//         <div style={{marginBottom: '15px'}}>
//             <div style={{marginBottom: '15px'}}>
//                 <b>–ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏</b>
//             </div>
//             <div>
//                 {props.buttons.map(b => <button key={b.id}>{b.title}</button>)}
//             </div>
//         </div>
//     )
// })
//
// ReactDOM.render(<App isAdmin={true}/>, document.getElementById('root'))

// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY,
// —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ª–∏—à–Ω–µ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ButtonsPanel
// –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥" ?

// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 111 222                                       –û–¢–í–ï–¢: useMemo isAdmin


// _______________________________________________________________________________________________________________
//                                                 –°–†–ï–î–ê –≠–ö–ó–ê–ú–ï–ù 4

// import {combineReducers, createStore} from 'redux'
//
// let initialState = {items: [{name: 'Dimych'}, {name: 'Ignat'}]}
// const usersReducer = (state = initialState, action: any) => {
//     return state
// }
//
// let authInitialState = {login: 'Margo', settings: {theme: 'dark'}}
// const authReducer = (state = authInitialState, action: any) => {
//     return state
// }
//
// const store = createStore(combineReducers({
//     users: usersReducer,
//     auth: authReducer
// }))
//
// store.subscribe(() => {
//     const login = store.getState().auth.login
//     console.log(login)
// })
//
// store.dispatch({type: 'ANY'})
// export default store;
//     –û–¢–í–ï–¢: auth: authReducer
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å 'Margo'?


// export const reducer = (state: any, action: any) => {
//     switch (action.type) {
//         case 'TRACK-ADDED':
//             return {
//                 ...state,
//                 [action.trackId]: {
//                     id: action.trackId, likesCount: 0
//                 }
//             }
//         default:
//             return state
//     }
// }
//
// const addTrackAC = (trackId: number) => ({type: 'TRACK-ADDED', trackId})
//
// const state = {
//     12: {id: 12, likesCount: 10},
//     14: {id: 14, likesCount: 2},
//     100: {id: 100, likesCount: 0},
// }
// const newState = reducer(state, addTrackAC(300))
// console.log(newState[300].likesCount === 0)
//            –û–¢–í–ï–¢: addTrackAC(300)
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å true?


// export const reducer = (state: any, action: any) => {
//     switch (action.type) {
//         case 'TRACK-DELETED':
//             return state.filter((track: any) => track.id !== action.trackId)
//         default:
//             return state
//     }
// }
//
// const deleteTrackAC =(trackId: number) =>({type:'TRACK-DELETED',trackId})
//
//
// const state = [
//     {id: 12, likesCount: 10},
//     {id: 14, likesCount: 2},
//     {id: 100, likesCount: 0}
// ]
//
// const newState = reducer(state, deleteTrackAC(14))
// console.log(newState.length === 2)
// –û–¢–í–ï–¢: {type:'TRACK-DELETED',trackId}
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å true?


// export const reducer = (state: any, action: any) => {
//     switch (action.type) {
//         case 'USER-NAME-UPDATED':
//             return {...state,user:{...state.user,name:action.name}}
//         default:
//             return state
//     }
// }
//
// const updateUserNameAC = (name: string) => ({type: 'USER-NAME-UPDATED', name})
//
//
// const state = {
//     count: 10,
//     user: {
//         name: 'Dimych',
//         age: 18,
//         isMarried: true,
//         status: "offline"
//     },
//     books: ['you don\'t know JS']
// }
// const newState = reducer(state, updateUserNameAC('Dmitry'))
//
// console.log(newState.user.name === 'Dmitry')
// console.log(newState.books === state.books)
// console.log(newState.user !== state.user)
//   –û–¢–í–ï–¢: {...state,user:{...state.user,name:action.name}}
//–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —É–≤–∏–¥–µ—Ç—å:  true true true?

// _______________________________________________________________________________________________________________________
//                                                     –ß–ï–¢–í–ï–†–ì –≠–ö–ó–ê–ú–ï–ù 1

// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type TodoType = {
//     id: number
//     title: string
//     completed: boolean
//     userId: number
// }
//
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const todosAPI = {
//     getTodos() {
//         return instance.get<TodoType[]>('todos?_limit=15')
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [todos, setTodos] = useState<Array<TodoType>>([])
//
//     useEffect(() => {
//         todosAPI.getTodos().then((res) => setTodos(res.data))
//     }, [])
//
//
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {
//                 todos.map((t) => {
//                     return (
//                         <div style={t.completed ? {color: 'grey'} : {}} key={t.id}>
//                             <input type="checkbox" checked={t.completed}/>
//                             <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                         </div>
//                     )
//                 })
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–æ –¥–æ–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫.
// –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ TodoType, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.
// Debugger / network / –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤–∞–º –≤ –ø–æ–º–æ—â—å

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: id status isDone                                                      –û–¢–í–ï–¢: title completed




//
// import axios from 'axios'
// import React, {useEffect, useState} from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type PostType = {
//     body: string
//     id: number
//     title: string
//     userId: number
// }
//
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//         // Promise.resolve() —Å—Ç–æ–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã TS –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
//         // Promise.resolve() –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
//         // return Promise.resolve()
//     },
// }
//
//
// // App
// export const App = () => {
//
//     const [posts, setPosts] = useState<PostType[]>([])
//
//     useEffect(() => {
//         postsAPI.getPosts()
//             .then((res: any) => {
//                 setPosts(res.data)
//             })
//     }, [])
//
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {
//                 posts.length
//                     ? posts.map(p => {
//                         return <div key={p.id}><b>title</b>: {p.title}</div>
//                     })
//                     : <h2>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
// –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.put('todolists/1')                     –û–¢–í–ï–¢: return instance.get<PostType[]>('posts')


// import axios from 'axios'
// import React, { ChangeEvent, useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type CommentType = {
//     postId: number
//     id: number
//     name: string
//     email: string
//     body: string
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>('comments?_limit=10')
//     },
//     createComment(body: string) {
//         const payload = {
//             body,
//             email: 'test@gmail.com',
//             name: 'Name',
//             postId: Math.random()
//         }
//         // Promise.resolve() —Å—Ç–æ–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã TS –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
//         // Promise.resolve() –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
//         return instance.post('comments',payload)
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [comments, setComments] = useState<CommentType[]>([])
//     const [commentBody, setCommentBody] = useState('')
//
//     useEffect(() => {
//         commentsAPI.getComments()
//             .then((res) => {
//                 setComments(res.data)
//             })
//     }, [])
//
//     const createPostHandler = () => {
//         commentsAPI.createComment(commentBody)
//             .then((res: any) => {
//                 const newComment = res.data
//                 setComments([newComment, ...comments])
//                 setCommentBody('')
//             })
//     };
//
//     const createTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {
//         setCommentBody(e.currentTarget.value)
//     };
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//
//             <div style={{marginBottom: '15px'}}>
//                 <input style={{width: '300px'}}
//                        type="text"
//                        value={commentBody}
//                        placeholder={'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç—Ä–∞—Ä–∏–π'}
//                        onChange={createTitleHandler}
//                 />
//                 <button style={{marginLeft: '15px'}}
//                         onClick={() => createPostHandler()}>
//                     –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
//                 </button>
//             </div>
//
//             {
//                 comments.map(c => {
//                     return <div key={c.id}><b>Comment</b>: {c.body} </div>
//                 })
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
// –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return Promise.resolve<PostType[]>(data)                   –û–¢–í–ï–¢: return instance.post('comments',payload)




// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type PostType = {
//     body: string
//     id: number
//     title: string
//     userId: number
// }
//
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//     },
//     deletePost(id: number) {
//         return instance.delete(`posts/${id}`)
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [posts, setPosts] = useState<PostType[]>([])
//
//     useEffect(() => {
//         postsAPI.getPosts()
//             .then((res) => {
//                 setPosts(res.data)
//             })
//     }, [])
//
//     const deletePostHandler = (id: number) => {
//         postsAPI.deletePost(id)
//             .then((res) => {
//                 const newPostsArr = posts.filter(p => p.id !== id)
//                 setPosts(newPostsArr)
//             })
//     };
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {posts.map(p => {
//                 return (
//                     <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <button style={{marginLeft: '15px'}}
//                                 onClick={() => deletePostHandler(p.id)}>
//                             x
//                         </button>
//                     </div>
//                 )
//             })}
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)
//                                                                                     –û–¢–í–ï–¢:   return instance.delete(`posts/${id}`)
// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—á–µ–º—É –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è post –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è (—Ö) ?
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.put('posts/1')





// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type PhotoType = {
//     albumId: number
//     id: number
//     title: string
//     url: string
//     thumbnailUrl: string
// }
//
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const photosAPI = {
//     getPhoto() {
//         return instance.get<PhotoType>('photos/1')
//     },
//     updatePhotoTitle(payload: PhotoType) {
//         return instance.put<PhotoType>(`photos/${payload.id}`, payload)
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [photo, setPhoto] = useState<PhotoType | null>(null)
//
//     useEffect(() => {
//         photosAPI.getPhoto()
//             .then((res) => {
//                 setPhoto(res.data)
//             })
//     }, [])
//
//     const updatePhotoHandler = () => {
//         const payload = {
//             title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ üöÄ',
//             albumId: 1,
//             id: 1,
//             url: "https://via.placeholder.com/600/92c952",
//             thumbnailUrl: "https://via.placeholder.com/150/92c952"
//         }
//         photosAPI.updatePhotoTitle(payload)
//             .then((res) => {
//                 setPhoto(res.data)
//             })
//     };
//
//     return (
//         <>
//             <h1>üì∏ –§–æ—Ç–æ</h1>
//             <div>
//                 <div style={{marginBottom: '15px'}}>
//                     <b>title</b>: {photo?.title}
//                     <button style={{marginLeft: '15px'}}
//                             onClick={updatePhotoHandler}>
//                         –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
//                     </button>
//                 </div>
//                 <div><img src={photo?.url} alt=""/></div>
//             </div>
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" title –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
// –Ω–∞ –Ω–∞–¥–ø–∏—Å—å "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ üöÄ", –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞
//                                                                      –û–¢–í–ï–¢:  return instance.put<PhotoType>(`photos/${payload.id}`, payload)
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: photosAPI.updatePhotoTitle(id, title)

//
// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client'
//
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     getUsers(pageNumber: number) {
//         return instance.get(`users?pageSize=${3}&pageNumber=${pageNumber}`)
//     },
// }
//
// // App
// const buttons = [
//     {id: 1, title: '1'},
//     {id: 2, title: '2'},
//     {id: 3, title: '3'},
// ]
//
// export const App = () => {
//
//     const [users, setUsers] = useState<UserType[]>([])
//     const [currentPage, setCurrentPage] = useState(1)
//
//     useEffect(() => {
//         api.getUsers(currentPage)
//             .then((res: any) => {
//                 setUsers(res.data.items)
//             })
//     }, [currentPage])
//
//     const setPageHandler = (page: number) => {
//         setCurrentPage(page)
//     };
//
//     return (
//         <>
//             <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//             {
//                 users.map(u => {
//                     return <div style={{marginBottom: '25px'}} key={u.id}>
//                         <p><b>name</b>: {u.name}</p>
//                         <p><b>age</b>: {u.age}</p>
//                     </div>
//                 })
//             }
//
//             {
//                 buttons.map(b => {
//                     return (
//                         <button key={b.id}
//                                 style={b.id === currentPage ? {backgroundColor: 'lightblue'} : {}}
//                                 onClick={() => setPageHandler(b.id)}>
//                             {b.title}
//                         </button>
//                     )
//                 })
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                                  return instance.get(`users?pageSize=${3}&pageNumber=${pageNumber}`)
// –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–æ–ª–∂–Ω—ã –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
// –û–¥–Ω–∞–∫–æ –≤ –∫–æ–¥–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –æ–¥–Ω–∏ –∏ —Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
// –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ —ç—Ç—É –æ—à–∏–±–∫—É, –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const [currentPage, setCurrentPage] = useState(page)




// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client'
//
// // Types
// type PhotoType = {
//     albumId: number
//     id: number
//     title: string
//     url: string
//     thumbnailUrl: string
// }
//
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const photosAPI = {
//     getPhotos(page: number) {
//         return instance.get<PhotoType[]>(`photos?_limit=2&_page=${page}`)
//     }
// }
//
//
// // App
//
// const buttons = [
//     {id: 1, title: '1'},
//     {id: 2, title: '2'},
//     {id: 3, title: '3'},
// ]
//
// export const App = () => {
//
//     const [photos, setPhotos] = useState<PhotoType[]>([])
//     const [currentPage, setCurrentPage] = useState(1)
//
//     useEffect(() => {
//         photosAPI.getPhotos(currentPage)
//             .then((res) => {
//                 setPhotos(res.data)
//             })
//     }, [currentPage])
//
//     const setPageHandler = (page: number) => {
//         setCurrentPage(page)
//     };
//
//     return (
//         <>
//             <h1>üì∏ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫</h1>
//             {/* Photos */}
//             {
//                 photos.map(p => {
//                     return <div style={{marginBottom: '25px'}} key={p.id}>
//                         <b>title</b>: {p.title}
//                         <div><img src={p.thumbnailUrl} alt=""/></div>
//                     </div>
//                 })
//             }
//
//             {/* Buttons */}
//             {
//                 buttons.map(b => {
//                     return (
//                         <button key={b.id}
//                                 style={b.id === currentPage ? {backgroundColor: 'lightblue'} : {}}
//                                 onClick={() => setPageHandler(b.id)}>
//                             {b.title}
//                         </button>
//                     )
//                 })
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –∫–æ–Ω—Ç–µ–Ω—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–∫) –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞. –í –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –¥–æ–ø—É—â–µ–Ω–æ 2 –æ—à–∏–±–∫–∏.
// –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ —ç—Ç–∏ –æ—à–∏–±–∫–∏, –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const [currentPage, setCurrentPage] = useState(page)                           –û–¢–í–ï–¢ const [photos, setPhotos] = useState<PhotoType[]>([])




// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type TodoType = {
//     id: number
//     title: string
//     completed: boolean
//     userId: number
// }
//
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const todosAPI = {
//     getTodo(todoId: number) {
//         return instance.get<TodoType>(`todos/${todoId}`)
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [todo, setTodo] = useState<TodoType | null>(null)
//     const [error, setError] = useState<string>('')
//
//     useEffect(() => {
//         const todoId = 4
//         todosAPI.getTodo(todoId)
//             .then((res: any) => setTodo(res.data))
//             .catch(e => {
//                 setError('–û—à–∏–±–∫–∞ üò∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π network üòâ')
//             })
//     }, [])
//
//
//     return (
//         <>
//             <h2>‚úÖ –¢—É–¥—É–ª–∏—Å—Ç</h2>
//             {
//                 !!todo
//                     ? <div>
//                         <div style={todo?.completed ? {color: 'grey'} : {}} key={todo?.id}>
//                             <input type="checkbox" checked={todo?.completed}/>
//                             <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todo?.title}
//                         </div>
//                         <h2>–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å. –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è üöÄ</h2>
//                     </div>
//                     : <h2 style={{ color: 'red' }}>{error}</h2>
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –°—Ç—É–¥–µ–Ω—Ç –ø–æ –Ω–µ–æ–ø—ã—Ç–Ω–æ—Å—Ç–∏ –¥–æ–ø—É—Å—Ç–∏–ª –æ–¥–Ω—É –º–∞–ª–µ–Ω—å–∫—É—é –æ—à–∏–±–∫—É, –Ω–æ –∏–∑-–∑–∞ –Ω–µ–µ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç—É–¥—É–ª–∏—Å—Ç.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  'https://jsonplaceholder.typicode.com/todos'
//                                                                                                 –û–¢–í–ï–¢: return instance.get<TodoType>(`todos/${todoId}`)
// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ.



// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type TodoType = {
//     id: string;
//     title: string;
//     order: number;
//     createdAt: string;
//     updatedAt: string;
//     completed: boolean;
// }
//
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const todosAPI = {
//     getTodo(todoId: string) {
//         return instance.get<TodoType>(`todos/${todoId}`)
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [todo, setTodo] = useState<TodoType | null>(null)
//     const [error, setError] = useState<string>('')
//
//     useEffect(() => {
//         const todoId = "637cb9342f24ad82bcb07d8d"
//         todosAPI.getTodo(todoId)
//             .then((res: any) => setTodo(res.data))
//             .catch(e => {
//                 setError('–û—à–∏–±–∫–∞ üò∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π network üòâ')
//             })
//     }, [])
//
//
//     return (
//         <>
//             <h2>‚úÖ –¢—É–¥—É–ª–∏—Å—Ç</h2>
//             {
//                 !!todo
//                     ? <div>
//                         <div style={todo?.completed ? {color: 'grey'} : {}} key={todo?.id}>
//                             <input type="checkbox" checked={todo?.completed}/>
//                             <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todo?.title}
//                         </div>
//                         <h2>–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å. –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è üöÄ</h2>
//                     </div>
//                     : <h2 style={{ color: 'red' }}>{error}</h2>
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –°—Ç—É–¥–µ–Ω—Ç –ø–æ –Ω–µ–æ–ø—ã—Ç–Ω–æ—Å—Ç–∏ –¥–æ–ø—É—Å—Ç–∏–ª –æ–¥–Ω—É –º–∞–ª–µ–Ω—å–∫—É—é –æ—à–∏–±–∫—É, –Ω–æ –∏–∑-–∑–∞ –Ω–µ–µ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç—É–¥—É–ª–∏—Å—Ç.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –ø–æ–¥–æ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  .then((res: any) => setTodo(res.data.data))                                          –û–¢–í–ï–¢ return instance.get<TodoType>(`todos/${todoId}`)



// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // TYPES
// type UserType = {
//     avatar: string
//     email: string
//     first_name: string
//     id: 1
//     last_name: string
// }
//
// type ColorType = {
//     color: string
//     id: number
//     name: string
//     pantone_value: string
//     year: number
// }
//
// type UsersResponseType = {
//     total: number
//     total_pages: number
//     page: number
//     per_page: number
//     support: {
//         url: string
//         text: string
//     }
//     url: string
//     data: UserType[]
// }
//
// type ColorsResponseType = {
//     total: number
//     total_pages: number
//     page: number
//     per_page: number
//     support: {
//         url: string
//         text: string
//     }
//     url: string
//     data: ColorType[]
// }
//
// type CommonResponseType <T> = {
//     total: number
//     total_pages: number
//     page: number
//     per_page: number
//     support: {
//         url: string
//         text: string
//     }
//     url: string
//     data: T
//     // your code
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://reqres.in/api/'
// })
//
// const reqresAPI = {
//     getUsers() {
//         return instance.get< CommonResponseType<UserType[]>>('users')
//     },
//     getColors() {
//         return instance.get<CommonResponseType<ColorType[]>>('colors')
//     }
// }
//
//
// // App
// const App = () => {
//     return (
//         <>
//             <h1>Reqres API</h1>
//             <Users/>
//             <Colors/>
//         </>
//     )
// }
//
// const Users = () => {
//
//     const [users, setUsers] = useState<UserType[]>([])
//
//     useEffect(() => {
//         reqresAPI.getUsers()
//             .then((res) => setUsers(res.data.data))
//     }, [])
//
//     return (
//         <div>
//             <h2>Users</h2>
//             <div style={{display: 'flex'}}>
//                 {
//                     users.map(u => {
//                         return (
//                             <div key={u.id} style={{marginRight: '25px'}}>
//                                 <p>{u.first_name}</p>
//                                 <img src={u.avatar} alt=""/>
//                             </div>
//                         )
//                     })
//                 }</div>
//         </div>
//     )
// }
//
// const Colors = () => {
//
//     const [colors, setColors] = useState<ColorType[]>([])
//
//     useEffect(() => {
//         reqresAPI.getColors()
//             .then((res) => setColors(res.data.data))
//     }, [])
//
//     return (
//         <div>
//             <h2>Colors</h2>
//             <div style={{display: 'flex'}}>
//                 {
//                     colors.map(c => {
//                         return (
//                             <div key={c.id} style={{marginRight: '25px'}}>
//                                 <p>{c.name}</p>
//                                 <div style={{backgroundColor: c.color, width: '128px', height: '30px'}}>
//                                     <b>{c.color}</b>
//                                 </div>
//                             </div>
//                         )
//                     })
//                 }</div>
//         </div>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ 2 —Å–ø–∏—Å–∫–∞: Users –∏ Colors.
// –° –Ω–∏–º–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ UsersResponseType –∏ ColorsResponseType.
// –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –Ω–∞ –ª–∏—Ü–æ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø CommonResponseType –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ç–∏–ø—ã.
// –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤ –≤ —Ç–∏–ø–∞—Ö –º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (–ø–æ –ø—Ä–∏—á–∏–Ω–µ —á—Ç–æ –Ω–∞–º –±—É–¥–µ—Ç —Ç—è–∂–µ–ª–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã :) )
// –ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø –Ω–∞–∑–æ–≤–∏—Ç–µ –±—É–∫–≤–æ–π T
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø CommonResponseType

// –û–¢–í–ï–¢:
//     type CommonResponseType <T> = {
//         total: number
//         total_pages: number
//         page: number
//         per_page: number
//         support: {
//             url: string
//             text: string
//         }
//         url: string
//         data: T
//     }







// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // TYPES
// type ProductType = {
//     id: string
//     title: string
//     description: string
//     price: number
// }
//
// type FilmType = {
//     id: number
//     nameOriginal: string
//     description: string
//     ratingImdb: number
// }
//
// type ProductsResponseType = {
//     total: number
//     messages: string[]
//     page: number
//     pageCount: number
//     data: ProductType[]
// }
//
// type FilmsResponseType = {
//     total: number
//     messages: string[]
//     page: number
//     pageCount: number
//     data: FilmType[]
// }
//
// type CommonResponseType <T> = {
//     total: number
//     messages:string []
//     page: number
//     pageCount:number
//     data: T
// }
//
// //Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     getProducts() {
//         return instance.get<CommonResponseType<ProductType[]>>('products')
//     },
//     getFilms() {
//         return instance.get<CommonResponseType<FilmType[]>>('films')
//     }
// }
//
//
// // App
// const App = () => {
//     return (
//         <>
//             <h1>üõí Products && üé¶ Films</h1>
//             <div style={{display: 'flex', justifyContent: 'space-evenly'}}>
//                 <Products/>
//                 <Films/>
//             </div>
//         </>
//     )
// }
//
// const Products = () => {
//
//     const [products, setProducts] = useState<ProductType[]>([])
//
//     useEffect(() => {
//         api.getProducts()
//             .then((res) => setProducts(res.data.data))
//     }, [])
//
//     return (
//         <div style={{width: '45%'}}>
//             <h2>üõí Products</h2>
//             <div>
//                 {
//                     products.map(p => {
//                         return (
//                             <div key={p.id}>
//                                 <b>{p.title}</b>
//                                 <p>{p.description}</p>
//                                 <p>üíµ {p.price} $</p>
//                             </div>
//                         )
//                     })
//                 }</div>
//         </div>
//     )
// }
//
// const Films = () => {
//
//     const [films, setFilms] = useState<FilmType[]>([])
//
//     useEffect(() => {
//         api.getFilms()
//             .then((res) => setFilms(res.data.data))
//     }, [])
//
//     return (
//         <div style={{width: '45%'}}>
//             <h2>üé¶ Films</h2>
//             <div>
//                 {
//                     films.map(f => {
//                         return (
//                             <div key={f.id}>
//                                 <b>{f.nameOriginal}</b>
//                                 <p>{f.description}</p>
//                                 <p>‚≠ê {f.ratingImdb} </p>
//                             </div>
//                         )
//                     })
//                 }</div>
//         </div>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ 2 —Å–ø–∏—Å–∫–∞: Products –∏ Films.
// –° –Ω–∏–º–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ ProductsResponseType –∏ FilmsResponseType.
// –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –Ω–∞ –ª–∏—Ü–æ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø CommonResponseType –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ç–∏–ø—ã.
// –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤ –≤ —Ç–∏–ø–∞—Ö –º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (–ø–æ –ø—Ä–∏—á–∏–Ω–µ —á—Ç–æ –Ω–∞–º –±—É–¥–µ—Ç —Ç—è–∂–µ–ª–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã :) )
// –ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø –Ω–∞–∑–æ–≤–∏—Ç–µ –±—É–∫–≤–æ–π T
//
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø CommonResponseType
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
// type CommonResponseType = {
//   total: T
//   messages: T[]
//   page: T
//   pageCount: T
//   data: T[]
// }


// –û–¢–í–ï–¢

// type CommonResponseType <T> = {
//     total: number
//     messages: string[]
//     page: number
//     pageCount: number
//     data: T
// }








// ___________________________________________________________________________________________________________________
//                                                 –ß–ï–¢–í–ï–†–ì –≠–ö–ó–ê–ú–ï–ù 2

// export React from 'react'
// import ReactDOM from 'react-dom/client';
//
//
// const thunkCreator = () => (dispatch: any, use: any) => {
//     // 1. Server requests
//     // 2. Dispatch actions
// }
//
//
// // App
// const App = () => {
//     return (
//         <>
//             <h1>–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–µ –Ω—É–∂–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è üòà</h1>
//             <p>–ß–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é</p>
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ XXX –∏ YYY —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Å–∞–Ω–∫—É.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: useCallback state                                                      –û–¢–í–ï–¢: dispatch getState






// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import axios from 'axios';
//
// // Types
// type TodoType = {
//     id: number
//     title: string
//     completed: boolean
//     userId: number
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const todosAPI = {
//     getTodos() {
//         return instance.get<TodoType[]>('todos?_limit=15')
//     },
//     changeTodoStatus(id: number, completed: boolean) {
//         return instance.patch(`todos/${id}`, {completed})
//     }
// }
//
//
// // Reducer
// const initState = [] as TodoType[]
//
// type InitStateType = typeof initState
//
// const todosReducer = (state: InitStateType = initState, action: ActionsType):InitStateType => {
//     switch (action.type) {
//         case 'TODOS/GET-TODOS':
//             return action.todos
//
//         case 'TODOS/CHANGE-TODO-STATUS':
//             return state.map((t) => {
//                 if (t.id === action.todo.id) {
//                     return {...t, completed: action.todo.completed}
//                 } else {
//                     return t
//                 }
//             })
//
//         default:
//             return state
//     }
// }
//
// const getTodosAC = (todos: TodoType[]) => ({type: 'TODOS/GET-TODOS', todos} as const)
// const changeTodoStatusAC = (todo: TodoType) => ({type: 'TODOS/CHANGE-TODO-STATUS', todo} as const)
// type ActionsType = ReturnType<typeof getTodosAC> | ReturnType<typeof changeTodoStatusAC>
//
// // Thunk
// const getPostsTC = (): AppThunk => (dispatch) => {
//     todosAPI.getTodos()
//         .then((res) => {
//             dispatch(getTodosAC(res.data))
//         })
// }
//
// const changeTodoStatusTC = (id: number, completed: boolean): AppThunk => (dispatch) => {
//     todosAPI.changeTodoStatus(id, completed)
//         .then((res) => {
//             dispatch(changeTodoStatusAC(res.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     todos: todosReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const todos = useAppSelector(state => state.todos)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const changeStatusHandler = (id: number, completed: boolean) => {
//         dispatch(changeTodoStatusTC(id, completed))
//     };
//
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {
//                 todos.length ?
//
//                     todos.map((t) => {
//                         return (
//                             <div style={t.completed ? {color: 'grey'} : {}} key={t.id}>
//                                 <input type="checkbox"
//                                        checked={t.completed}
//                                        onChange={() => changeStatusHandler(t.id, !t.completed)}
//                                 />
//                                 <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                             </div>
//                         )
//                     })
//                     : <h2>–¢—É–¥—É–ª–∏—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState                                       –û–¢–í–ï–¢: dispatch(getPostsTC())






// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import {applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
// // Types
// type PhotoType = {
//     albumId: number
//     id: number
//     title: string
//     url: string
//     thumbnailUrl: string
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const photosAPI = {
//     getPhotos() {
//         return instance.get<PhotoType[]>('photos?_limit=3')
//     },
// }
//
//
// // Reducer
// const initState = [] as PhotoType[]
//
// type InitStateType = typeof initState
//
// const photoReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case 'PHOTO/GET-PHOTOS':
//             return action.photos
//
//         default:
//             return state
//     }
// }
//
// const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
// type ActionsType = ReturnType<typeof getPhotosAC>
//
// const getPhotosTC = (): AppThunk => (dispatch) => {
//     photosAPI.getPhotos()
//         .then((res) => {
//             dispatch(getPhotosAC(res.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     photo: photoReducer,
// })
//
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Components
// const App = () => {
//     const dispatch = useAppDispatch()
//     const photos = useAppSelector(state => state.photo)
//
//     const getPhotosHandler = () => {
//         dispatch(getPhotosTC())
//     };
//
//     return (
//         <>
//             <h1>üì∏ –§–æ—Ç–æ</h1>
//             {
//                 photos.map(p => {
//                     return <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <div><img src={p.thumbnailUrl} alt=""/></div>
//                     </div>
//                 })
//             }
//
//             <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π,
// –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState                                        –û–¢–í–ï–¢: const store = createStore(rootReducer, applyMiddleware(thunk))






// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
// // Types
// type PostType = {
//     body: string
//     id: number
//     title: string
//     userId: number
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts?_limit=15')
//     },
// }
//
//
// // Reducer
// const initState = [] as PostType[]
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: GetPostsActionType): InitStateType => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return action.posts
//     }
//     return state
// }
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// type GetPostsActionType = ReturnType<typeof getPostsAC>
//
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, GetPostsActionType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, GetPostsActionType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {
//                 posts.length
//                     ? posts.map(p => {
//                         return <div key={p.id}><b>title</b>: {p.title}</div>
//                     })
//                     : <h2>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.

// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–∞–∫ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ.                –û–¢–í–ïT: dispatch(getPostsTC())









// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
//
//
// // Types
// type PostType = {
//     body: string
//     id: number
//     title: string
//     userId: number
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts?_limit=10')
//     },
//     createPost() {
//         const payload = {
//             body: 'new post body',
//             title: 'new post title',
//             userId: 1
//         }
//         return instance.post('posts', payload)
//     }
// }
//
// // Reducer
// const initState = [] as PostType[]
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return action.posts
//
//         case 'POSTS/CREATE-POST':
//             return [action.post, ...state]
//
//         default:
//             return state
//     }
// }
//
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const createPostAC = (post: PostType) => ({type: 'POSTS/CREATE-POST', post} as const)
//
// type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof createPostAC>
//
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// const addPostTC = (): AppThunk => (dispatch) => {
//     postsAPI.createPost()
//         .then((res) => {
//             dispatch(createPostAC(res.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const addPostHandler = () => {
//         dispatch(addPostTC())
//     };
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             <button style={{marginBottom: '10px'}} onClick={addPostHandler}>–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç</button>
//             {
//                 posts.map(p => {
//                     return <div key={p.id}><b>title</b>: {p.title}</div>
//                 })
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç" –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è,
// –Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è alert.
// –í–º–µ—Å—Ç–æ alerta –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ—Å—Ç –¥–æ–±–∞–≤–ª—è–ª—Å—è.
// –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get<PostType[]>('posts?_limit=10')                                   –û–¢–í–ï–¢:  dispatch(addPostTC())





// import axios from 'axios'
// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import {AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
// // Types
// type CommentType = {
//     postId: number
//     id: number
//     name: string
//     email: string
//     body: string
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>('comments?_limit=10')
//     }
// }
//
// // Reducer
// const initState = [] as CommentType[]
//
// type InitStateType = typeof initState
//
// const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case 'COMMENTS/GET-COMMENTS':
//             return action.comments
//         default:
//             return state
//     }
// }
//
// const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
// type ActionsType = ReturnType<typeof getCommentsAC>
//
// const getCommentsTC = (): ThunkAction<void, RootState, unknown, ActionsType> => (dispatch) => {
//     commentsAPI.getComments()
//         .then((res) => {
//             dispatch(getCommentsAC(res.data))
//         })
// }
//
//
// // Store
// const rootReducer = combineReducers({
//     comments: commentsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// export const App = () => {
//
//     const comments = useAppSelector(state => state.comments)
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         dispatch(getCommentsTC())
//     }, [])
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {
//                 comments.map(c => {
//                     return <div key={c.id}><b>Comment</b>: {c.body} </div>
//                 })
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void                                                –û–¢–í–ï–¢: void RootState unknown ActionsType





// import axios from 'axios'
// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import {AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux';
// import thunk, { ThunkDispatch } from 'redux-thunk';
//
// // Types
// type CommentType = {
//     postId: number
//     id: number
//     name: string
//     email: string
//     body: string
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>('comments?_limit=10')
//     }
// }
//
// // Reducer
// const initState = [] as CommentType[]
//
// type InitStateType = typeof initState
//
// const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case 'COMMENTS/GET-COMMENTS':
//             return action.comments
//     }
//     return state
// }
//
// const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
// type ActionsType = ReturnType<typeof getCommentsAC>
//
// const getCommentsTC = () => (dispatch: DispatchType) => {
//     commentsAPI.getComments()
//         .then((res) => {
//             dispatch(getCommentsAC(res.data))
//         })
// }
//
//
// // Store
// const rootReducer = combineReducers({
//     comments: commentsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof rootReducer>
// type DispatchType = ThunkDispatch<RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<DispatchType>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// export const App = () => {
//
//     const comments = useAppSelector(state => state.comments)
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         dispatch(getCommentsTC())
//     }, [])
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {
//                 comments.map(c => {
//                     return <div key={c.id}><b>Comment</b>: {c.body} </div>
//                 })
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)
//
// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkDispatch<any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å dispatch ?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone                                                –û–¢–í–ïT: RootState unknown ActionsType




// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
//
// // Types
// type PostType = {
//     body: string
//     id: string
//     title: string
//     userId: number
// }
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://jsonplaceholder.typicode.com/'
// })
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts?_limit=15')
//     },
//     updatePostTitle(post: PostType) {
//         return instance.put<PostType>(`posts/${post.id}`, post)
//     }
// }
//
//
// // Reducer
// const initState = [] as PostType[]
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return action.posts
//
//         case 'POSTS/UPDATE-POST-TITLE':
//             return state.map((p) => {
//                 if (p.id === action.post.id) {
//                     return {...p, title: action.post.title}
//                 } else {
//                     return p
//                 }
//             })
//
//         default:
//             return state
//     }
// }
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const updatePostTitleAC = (post: PostType) => ({type: 'POSTS/UPDATE-POST-TITLE', post} as const)
// type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>
//
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// const updatePostTC = (postId: string): AppThunk => (dispatch, getState: () => AppRootStateType) => {
//     try {
//         const currentPost = getState().posts.find((p: PostType) => p.id === postId)
//
//         if (currentPost) {
//             const payload = {...currentPost, title: '–õ–µ—Ç–∏–º üöÄ'}
//             postsAPI.updatePostTitle(payload)
//                 .then((res) => {
//                     dispatch(updatePostTitleAC(res.data))
//                 })
//         }
//     } catch (e) {
//         alert('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢')
//     }
//
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// type RootReducerType = typeof rootReducer
// export type AppRootStateType = ReturnType<RootReducerType>
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const updatePostHandler = (postId: string) => {
//         dispatch(updatePostTC(postId))
//     }
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {
//                 posts.map(p => {
//                     return <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
//                     </div>
//                 })
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'}
// –ü–æ–¥—Å–∫–∞–∑–∫–∞. –ò–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –≤—Å–µ—Ö any –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–∞–º–æ —Å–æ–±–æ–π üòâ

                                                                          // –û–¢–í–ï–¢: const currentPost = getState().posts.find((p: PostType) => p.id === postId)




// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
//
// // Types
// type PostType = {
//     body: string
//     id: string
//     title: string
//     userId: string
// }
//
// type PayloadType = {
//     title: string
//     body?: string
// }
//
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//     },
//     updatePostTitle(postId: string, post: PayloadType) {
//         return instance.put<PostType>(`posts/${postId}`, post)
//     }
// }
//
//
// // Reducer
// const initState = [] as PostType[]
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return action.posts
//
//         case 'POSTS/UPDATE-POST-TITLE':
//             return state.map((p) => {
//                 if (p.id === action.post.id) {
//                     return {...p, title: action.post.title}
//                 } else {
//                     return p
//                 }
//             })
//
//         default:
//             return state
//     }
// }
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const updatePostTitleAC = (post: PostType) => ({type: 'POSTS/UPDATE-POST-TITLE', post} as const)
// type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>
//
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// const updatePostTC = (postId: string): AppThunk => (dispatch, getState: () => AppRootStateType) => {
//
//     try {
//         const currentPost = getState().posts.find((p: PostType) => p.id === postId)
//         if (currentPost) {
//             const payload = {title: '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π title'}
//             postsAPI.updatePostTitle(postId, payload)
//                 .then((res) => {
//                     dispatch(updatePostTitleAC(res.data))
//                 })
//         }
//     } catch (e) {
//         alert('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢')
//     }
//
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// type RootReducerType = typeof rootReducer
// export type AppRootStateType = ReturnType<RootReducerType>
//
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const updatePostHandler = (postId: string) => {
//         dispatch(updatePostTC(postId))
//     }
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {
//                 posts.map(p => {
//                     return <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
//                     </div>
//                 })
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//                                                                                  –û–¢–í–ï–¢: const currentPost = getState().posts.find((p: PostType) => p.id === postId)
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'}


// _________________________________________________________________________________________________________________
//                                                         –ß–ï–¢–í–ï–†–ì –≠–ö–ó–ê–ú–ï–ù 3


// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
// // Types
// type PhotoType = {
//     albumId: string
//     id: string
//     title: string
//     url: string
// }
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const photosAPI = {
//     getPhotos() {
//         return instance.get<PhotoType[]>('photos?delay=2')
//     },
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     photos: [] as PhotoType[]
// }
//
// type InitStateType = typeof initState
//
// const photoReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'PHOTO/GET-PHOTOS':
//             return {...state, photos: action.photos}
//         case 'PHOTO/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         default:
//             return state
//     }
// }
//
// const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'PHOTO/IS-LOADING', isLoading} as const)
// type ActionsType = ReturnType<typeof getPhotosAC> | ReturnType<typeof setLoadingAC>
//
// const getPhotosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     photosAPI.getPhotos()
//         .then((res) => {
//             dispatch(getPhotosAC(res.data))
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     photo: photoReducer
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const photos = useAppSelector(state => state.photo.photos)
//     const isLoading = useAppSelector(state => state.photo.isLoading)
//
//     const getPhotosHandler = () => {
//         dispatch(getPhotosTC())
//     };
//
//     return (
//         <>
//             <h1>üì∏ –§–æ—Ç–æ</h1>
//             <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
//             {isLoading && <Loader/>}
//             <div style={{display: 'flex', gap: '20px', margin: '20px'}}>{
//                 photos.map(p => {
//                     return <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <div><img src={p.url} alt=""/></div>
//                     </div>
//                 })
//             }</div>
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                                     –û–¢–í–ï–¢: dispatch(setLoadingAC(false))
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å Loading...,
// –∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
// –ù–æ –ø–æ—Å–ª–µ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Loader –Ω–µ —É–±–∏—Ä–∞–µ—Ç—Å—è.
// –ö–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã Loader –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log('stop Loader')


// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import axios from 'axios';
//
//
// // Types
// type PostDomainType = PostType & {
//     isDisabled: boolean
// }
//
// type PostType = {
//     body: string
//     id: string
//     title: string
//     userId: string
// }
//
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//     },
//     deletePost(id: string) {
//         return instance.delete<{ message: string }>(`posts/${id}?delay=3`)
//     }
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     posts: [] as PostDomainType[]
// }
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return {
//                 ...state, posts: action.posts.map(t => {
//                     return {...t, isDisabled: false}
//                 })
//             }
//
//         case 'POSTS/DELETE-POST':
//             return {...state, posts: state.posts.filter(t => t.id !== action.id)}
//
//         case 'POSTS/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//
//         case 'POSTS/IS-DISABLED':
//             return {
//                 ...state, posts: state.posts.map((t) => {
//                     if (t.id === action.id) {
//                         return {...t, isDisabled: action.isDisabled}
//                     } else {
//                         return t
//                     }
//                 })
//             }
//
//         default:
//             return state
//     }
// }
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const deletePostAC = (id: string) => ({type: 'POSTS/DELETE-POST', id} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'POSTS/IS-LOADING', isLoading} as const)
// const setIsDisabled = (isDisabled: boolean, id: string) => ({type: 'POSTS/IS-DISABLED', isDisabled, id} as const)
// type ActionsType =
//     | ReturnType<typeof getPostsAC>
//     | ReturnType<typeof deletePostAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setIsDisabled>
//
// // Thunk
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// const deletePostTC = (id: string): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     postsAPI.deletePost(id)
//         .then((res) => {
//             dispatch(deletePostAC(id))
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts.posts)
//     const isLoading = useAppSelector(state => state.posts.isLoading)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const deletePostHandler = (id: string) => {
//         dispatch(deletePostTC(id))
//     };
//
//     return (
//         <div>
//             <div style={{position: 'absolute', top: '0px'}}>
//                 {isLoading && <Loader/>}
//             </div>
//             <div style={{marginTop: '100px'}}>
//                 <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//                 {posts.map(p => {
//                     return (
//                         <div key={p.id}>
//                             <b>title</b>: {p.title}
//                             <button style={{marginLeft: '15px'}}
//                                     onClick={() => deletePostHandler(p.id)}
//                                     disabled={isLoading}
//                             >
//                                 —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
//                             </button>
//                         </div>
//                     )
//                 })}
//             </div>
//         </div>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.                                                             disabled={isLoading} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ –Ω–µ –ø—Ä–∞–≤
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
// –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Preview –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç "Post has been successfully deleted",
// –∞ —Å–ª–µ–¥—É—é—â–∏–µ "Post with id: 63626ac315d01f80765587ee does not exist"
// –¢.–µ. –±—ç–∫–µ–Ω–¥ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É–¥–∞–ª—è–µ—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç, —Ç.–∫. –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è,
// —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
// –ù–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: style={{marginRight: '20px'}}


// import React, {useEffect} from 'react'
// import ReactDOM from 'react-dom/client';
// import {applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux'
// import {Provider, TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'
// import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk'
// import axios, {AxiosError} from 'axios';
//
//
// // Types
// type PostType = {
//     id: string
//     body: string
//     title: string
//     userId: string
// }
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/ '})
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//     },
// }
//
// // Reducer
// const initState = {
//     error: null as string | null,
//     posts: [] as PostType[]
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return {...state, posts: action.posts}
//
//         case 'POSTS/SET-ERROR':
//             return {...state, error: action.error}
//
//         default:
//             return state
//     }
// }
//
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const setErrorAC = (error: string | null) => ({type: 'POSTS/SET-ERROR', error} as const)
// type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof setErrorAC>
//
// // Thunk
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setErrorAC(e.message))
//         })
// }
//
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Components
// export const App = () => {
//
//     const dispatch = useAppDispatch()
//
//     const posts = useAppSelector(state => state.app.posts)
//     const error = useAppSelector(state => state.app.error)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {
//                 posts.length
//                     ?
//                     posts.map(c => {
//                         return <div key={c.id}><b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {c.body} </div>
//                     })
//                     :
//                     <h3>‚ùå –ü–æ—Å—Ç—ã –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –í—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω</h3>
//             }
//             <h2 style={{color: 'red'}}>{!!error && error}</h2>
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                                      –û–¢–í–ï–¢: dispatch(setErrorAC(e.message))
// ‚ùå –ü–æ—Å—Ç—ã –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.
// –ß–∏–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è, –≤ –æ—Ç–≤–µ—Ç–µ —ç—Ç–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è).
// –ó–∞–¥–∞—á–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —ç—Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const store = createStore(rootReducer, applyMiddleware(thunk))




// import React, { useState } from 'react'
// import ReactDOM from 'react-dom/client';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import axios, { AxiosError } from 'axios';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
//
// // Types
// type NullableType<T> = null | T
//
// type LoginFieldsType = {
//     email: string
//     password: string
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     login(data: LoginFieldsType) {
//         return instance.post('auth/login', data)
//     },
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as NullableType<string>,
//     isLoggedIn: false,
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/SET-IS-LOGGED-IN':
//             return {...state, isLoggedIn: action.isLoggedIn}
//         case 'APP/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'APP/SET-ERROR':
//             return {...state, error: action.error}
//         default:
//             return state
//     }
// }
//
// // Actions
// const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
// type ActionsType = | ReturnType<typeof setIsLoggedIn> | ReturnType<typeof setLoadingAC> | ReturnType<typeof setError>
//
// // Thunk
// const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.login(values)
//         .then((res) => {
//             dispatch(setIsLoggedIn(true))
//             alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')
//         })
//         .catch((e) => {
//             dispatch(setError(e.response.data.errors))
//         })
//         .finally(() => {
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>
// }
//
// // App
// export const App = () => {
//
//     const dispatch = useAppDispatch()
//
//     const [form, setForm] = useState<LoginFieldsType>({email: '', password: ''})
//
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     const changeFormValuesHandler = (e: React.ChangeEvent<HTMLInputElement>, field: string) => {
//         if (field === 'email') {
//             setForm({...form, email: e.currentTarget.value})
//         }
//         if (field === 'password') {
//             setForm({...form, password: e.currentTarget.value})
//         }
//     };
//
//     const submitForm = (e: React.MouseEvent<HTMLButtonElement>) => {
//         e.preventDefault()
//         dispatch(loginTC(form))
//     };
//
//     return (
//         <div>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             <form>
//                 <div>
//                     <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                            value={form.email}
//                            onChange={(e) => changeFormValuesHandler(e, 'email')}
//                     />
//                 </div>
//                 <div>
//                     <input type={'password'}
//                            placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                            value={form.password}
//                            onChange={(e) => changeFormValuesHandler(e, 'password')}
//                     />
//                 </div>
//                 <button type="submit" onClick={submitForm}>–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
//             </form>
//         </div>
//     );
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                                         –û–¢–í–ï–¢: dispatch(setError(e.response.data.errors))
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// –£ –≤–∞—Å —ç—Ç–æ –Ω–∞–≤—Ä—è–¥ –ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è üòà, —Ç.–∫. –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.
// –û—Ç–∫—Ä–æ–π—Ç–µ Network –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.
// –ó–∞–¥–∞—á–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–æ–≤–æ—Ä—è—â—É—é –æ —Ç–æ–º —á—Ç–æ email –∏–ª–∏ password –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —ç—Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch('Error message')
// ‚ùó –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –Ω–µ –Ω–∞–¥–æ, —Ç.–∫. —Ç–∞–º –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω—é–∞–Ω—Å–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É–∑–Ω–∞–µ—Ç–µ –ø–æ–∑–∂–µ




// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import axios, { AxiosError } from 'axios';
//
//
// // Types
// type CommentType = {
//     postId: string
//     id: string
//     name: string
//     email: string
//     body: string
// }
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>('comments')
//     }
// }
//
// // Reducer
// const initState = {
//     comments: [] as CommentType[]
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case 'COMMENTS/GET-COMMENTS':
//             return {...state, comments: action.comments}
//
//         default:
//             return state
//     }
// }
//
// const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
// type ActionsType = ReturnType<typeof getCommentsAC>
//
// // Thunk
// const getCommentsTC = (): AppThunk => (dispatch) => {
//     commentsAPI.getComments()
//         .then((res) => {
//             dispatch(getCommentsAC(res.data))
//         })
//         .catch((e: AxiosError) => {
//             alert(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${e.message}`)
//         })
// }
//
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Components
// export const App = () => {
//
//     const comments = useAppSelector(state => state.app.comments)
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         dispatch(getCommentsTC())
//     }, [])
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {
//                 comments.length
//                     ?
//                     comments.map(c => {
//                         return <div key={c.id}><b>Comment</b>: {c.body} </div>
//                     })
//                     :
//                     <h3>‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –µ–µ</h3>
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)
//
// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                       –û–¢–í–ï–¢: return instance.get<CommentType[]>('comments')
// ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.
// –í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –∏ –ø–æ—á–∏–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
// –ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ —É–≤–∏–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const store = createStore(rootReducer, applyMiddleware(thunk))



// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios, { AxiosError } from 'axios';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
// // Types
// type PhotoType = {
//     albumId: string
//     id: string
//     title: string
//     url: string
// }
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const photosAPI = {
//     getPhotos() {
//         return instance.get<PhotoType[]>('pictures?delay=3')
//     },
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     photos: [] as PhotoType[]
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'PHOTO/GET-PHOTOS':
//             return {...state, photos: action.photos}
//         case 'PHOTO/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'PHOTO/SET-ERROR':
//             return {...state, error: action.error}
//         default:
//             return state
//     }
// }
//
// const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'PHOTO/IS-LOADING', isLoading} as const)
// const setError = (error: string | null) => ({type: 'PHOTO/SET-ERROR', error} as const)
// type ActionsType =
//     | ReturnType<typeof getPhotosAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>
//
// const getPhotosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     photosAPI.getPhotos()
//         .then((res) => {
//             dispatch(getPhotosAC(res.data))
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setError(e.message))
//         })
//         .finally(() =>{
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//
//     const photos = useAppSelector(state => state.app.photos)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//     const error = useAppSelector(state => state.app.error)
//
//     const getPhotosHandler = () => {
//         dispatch(getPhotosTC())
//     };
//
//     return (
//         <>
//             <h1>üì∏ –§–æ—Ç–æ</h1>
//             <h2 style={{color: 'red'}}>{!!error && error}</h2>
//             {isLoading && <Loader/>}
//             <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
//             <div style={{display: 'flex', gap: '20px', margin: '20px'}}>
//                 {
//                     photos.map(p => {
//                         return <div key={p.id}>
//                             <b>title</b>: {p.title}
//                             <div><img src={p.url} alt=""/></div>
//                         </div>
//                     })
//                 }
//             </div>
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)


// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                               –û–¢–í–ï–¢: .finally(() =>{dispatch(setLoadingAC(false))})
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –ø–æ—è–≤–ª—è–µ—Ç—Å—è Loading... –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ø—Ä—è—Ç–∞—Ç—å Loader –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// –¢.–µ. –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–π - Loader —É–±–∏—Ä–∞–µ–º
//      –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π - Loader —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º.
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: .then(() =>  dispatch(getPhotosAC(res.data)))


// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, Dispatch, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios, { AxiosError } from 'axios'
//
// // TYPES
// type TodoType = {
//     id: string;
//     title: string;
//     order: number;
//     createdAt: string;
//     updatedAt: string;
//     completed: boolean;
// }
//
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// }
//
// type UsersResponseType = {
//     items: UserType[]
//     totalCount: number
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     getTodos() {
//         return instance.get<TodoType[]>('todo')
//     },
//     getUsers() {
//         return instance.get<UsersResponseType>('user')
//     },
// }
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     todos: [] as TodoType[],
//     users: [] as UserType[],
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/GET-TODOS':
//             return {...state, todos: action.todos}
//         case 'APP/GET-USERS':
//             return {...state, users: action.users}
//         case 'APP/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'APP/SET-ERROR':
//             return {...state, error: action.error}
//         default:
//             return state
//     }
// }
//
// const getUsersAC = (users: UserType[]) => ({type: 'APP/GET-USERS', users} as const)
// const getTodosAC = (todos: TodoType[]) => ({type: 'APP/GET-TODOS', todos} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
//
// type ActionsType =
//     | ReturnType<typeof getUsersAC>
//     | ReturnType<typeof getTodosAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>
//
// // Utils functions
// function baseErrorHandler(dispatch: Dispatch, message: string) {
//     dispatch(setError(message))
//     dispatch(setLoadingAC(false))
// }
//
//
// // Thunk
// const getTodosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.getTodos()
//         .then((res) => {
//             dispatch(getTodosAC(res.data))
//             dispatch(setLoadingAC(false))
//         })
//         .catch((e: AxiosError) => {
//             baseErrorHandler(dispatch,e.message)
//             // XXX
//         })
// }
//
// const getUsersTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.getUsers()
//         .then((res) => {
//             dispatch(getUsersAC(res.data.items))
//             dispatch(setLoadingAC(false))
//         })
//         .catch((e: AxiosError) => {
//             baseErrorHandler(dispatch,e.message)
//             // XXX
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // COMPONENTS
// // Loader
// export const Loader = () => {
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
//
// const App = () => {
//     return (
//         <>
//             <h1>‚úÖTodos & üôÇUsers</h1>
//             <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>
//                 <Todos/>
//                 <Users/>
//             </div>
//         </>
//     )
// }
//
// const Todos = () => {
//     const dispatch = useAppDispatch()
//     const todos = useAppSelector(state => state.app.todos)
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     useEffect(() => {
//         dispatch(getTodosTC())
//     }, [])
//
//     return (
//         <div>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             {
//                 todos.map((t) => {
//                     return (
//                         <div style={t.completed ? {color: 'grey'} : {}} key={t.id}>
//                             <input type="checkbox" checked={t.completed}/>
//                             <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                         </div>
//                     )
//                 })
//             }
//         </div>
//     )
// }
//
// const Users = () => {
//     const dispatch = useAppDispatch()
//     const users = useAppSelector(state => state.app.users)
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     useEffect(() => {
//         dispatch(getUsersTC())
//     }, [])
//
//     return (
//         <div>
//             <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             <div>
//                 {
//                     users.map(u => {
//                         return (
//                             <div key={u.id}>
//                                 <b>name</b>:{u.name} - <b>age</b>:{u.age}
//                             </div>
//                         )
//                     })
//                 }</div>
//         </div>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)


// üìú –û–ø–∏—Å–∞–Ω–∏–µ:                                                                     –û–¢–í–ï–¢: baseErrorHandler(dispatch,e.message)
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ.
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏,
// –Ω–æ –≤ –∫–æ–¥–µ —ç—Ç–æ—Ç –Ω–∏–∫–∞–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω–∞ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è baseErrorHandler.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö —É–≤–∏–¥–µ–ª ?
//‚ùó –ö–æ–¥ —Ñ–∏–∫—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch(setLoadingAC(false))



// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore, Dispatch } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios, { AxiosError } from 'axios'
//
// // TYPES
// type TodoType = {
//     id: string;
//     title: string;
//     order: number;
//     createdAt: string;
//     updatedAt: string;
//     completed: boolean;
// }
//
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// }
//
// type UsersResponseType = {
//     items: UserType[]
//     totalCount: number
// }
//
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     getTodos() {
//         return instance.get<TodoType[]>('todos')
//     },
//     getUsers() {
//         return instance.get<UsersResponseType>('users')
//     },
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     todos: [] as TodoType[],
//     users: [] as UserType[],
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/GET-TODOS':
//             return {...state, todos: action.todos}
//         case 'APP/GET-USERS':
//             return {...state, users: action.users}
//         case 'APP/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'APP/SET-ERROR':
//             return {...state, error: action.error}
//         default:
//             return state
//     }
// }
//
// const getUsersAC = (users: UserType[]) => ({type: 'APP/GET-USERS', users} as const)
// const getTodosAC = (todos: TodoType[]) => ({type: 'APP/GET-TODOS', todos} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
//
// type ActionsType =
//     | ReturnType<typeof getUsersAC>
//     | ReturnType<typeof getTodosAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>
//
//
// // Utils functions
// function baseSuccessHandler<T>(dispatch: Dispatch, actionCreator: Function, data: T) {
//     dispatch(actionCreator(data))
//     dispatch(setLoadingAC(false))
// }
//
// // Thunk
// const getTodosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.getTodos()
//         .then((res) => {
//             baseSuccessHandler(dispatch,getTodosAC, res.data)
//             // XXX
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setError(e.message))
//             dispatch(setLoadingAC(false))
//         })
// }
//
// const getUsersTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.getUsers()
//         .then((res) => {
//             baseSuccessHandler(dispatch,getUsersAC, res.data.items)
//             // YYY
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setError(e.message))
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // COMPONENTS
// // Loader
// export const Loader = () => {
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
// const App = () => {
//     return (
//         <>
//             <h1>‚úÖTodos & üôÇUsers</h1>
//             <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>
//                 <Todos/>
//                 <Users/>
//             </div>
//         </>
//     )
// }
//
// const Todos = () => {
//     const dispatch = useAppDispatch()
//     const todos = useAppSelector(state => state.app.todos)
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     useEffect(() => {
//         dispatch(getTodosTC())
//     }, [])
//
//     return (
//         <div>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             {
//                 todos.map((t) => {
//                     return (
//                         <div style={t.completed ? {color: 'grey'} : {}} key={t.id}>
//                             <input type="checkbox" checked={t.completed}/>
//                             <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                         </div>
//                     )
//                 })
//             }
//         </div>
//     )
// }
//
// const Users = () => {
//     const dispatch = useAppDispatch()
//     const users = useAppSelector(state => state.app.users)
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     useEffect(() => {
//         dispatch(getUsersTC())
//     }, [])
//
//     return (
//         <div>
//             <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             <div>
//                 {
//                     users.map(u => {
//                         return (
//                             <div key={u.id}>
//                                 <b>name</b>:{u.name} - <b>age</b>:{u.age}
//                             </div>
//                         )
//                     })
//                 }</div>
//         </div>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)


// üìú –û–ø–∏—Å–∞–Ω–∏–µ:    –û–¢–í–ï–¢:  baseSuccessHandler(dispatch,getTodosAC, res.data) baseSuccessHandler(dispatch,getUsersAC, res.data.items)
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ.
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É—Ö–æ–¥—è—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å —Ö–æ—Ä–æ—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏,
// –Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ Loader.
// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è baseSuccessHandler.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å Todos –∏ Users
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch(baseSuccessHandler(1,2,3))  dispatch(baseSuccessHandler(3,2,1)


// _______________________________________________________________________________________________________________________
//                                                     –ß–ï–¢–í–ï–†–ì –≠–ö–ó–ê–ú–ï–ù 4


// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import {  BrowserRouter, Route, Routes } from 'react-router-dom'
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={'/'} element={<Main/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω... –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//                                                                  –í–æ–ø—Ä–æ—Å —Å —Ñ–æ—Ä–º–∞–π –æ—Ç–≤–µ—Ç–∞
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} component={<Main/>}/>        –û–¢–í–ï–¢: root.render(<BrowserRouter><App/></BrowserRouter>)





// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//
//     return (
//         <Routes>
//             <Route path={'/'} element={<Main/>}/>
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π...
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//                                                                                   –ù–µ —è—Å–Ω–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState                           –û—Ç–≤–µ—Ç:   <Route path={'/'} element={<Main/>}/>



//
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'
//
//
// export const PageNotFound = () => {
//     return <h2>‚õî 404. Page not found ‚õî</h2>
// }
//
// export const Profile = () => {
//     return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
// }
//
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//
//     return (
//         <Routes>
//             <Route path={'profile'} element={<Profile/>}/>
//             <Route path={'*'} element={<Navigate to={'/profile'}/>}/>
//             {/* ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó  */}
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ –•–•–• –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–æ—É—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—É–¥–µ—Ç –≤ —É—Ä–ª–µ (login –∏–ª–∏ home –∏–ª–∏...)
// –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∏ –≤ —ç—Ç–æ –≤ —É—Ä–ª–µ –ø–æ –∏—Ç–æ–≥—É
// –±—ã–ª –∞–¥—Ä–µ—Å /profile

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} element={'to profile page'}/>                   –û–¢–í–ï–¢: <Route path={'*'} element={<Navigate to={'/profile'}/>}/>



// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             email: '',
//             password: '',
//         },
//         onSubmit: (values) => {
//             alert(JSON.stringify(values, null, 2));
//         },
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input
//                     name="email"
//                     onChange={formik.handleChange}
//                     value={formik.values.email}
//                     type="text"
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.password}
//                     type="password"
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                 />
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å alert c
// –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–æ –∏–∑-–∑–∞ –¥–æ–ø—É—â–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// ‚ùó–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª—Å—è alert —Ñ–æ—Ä–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: alert(JSON.stringify(values))                           –û–¢–í–ï–¢:  <form onSubmit={formik.handleSubmit}>




// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             lastName: '',
//             email: '',
//             password: '',
//             phone: '',
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         },
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input
//                     name="firstName"
//                     onChange={formik.handleChange}
//                     value={formik.values.firstName}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="lastName"
//                     onChange={formik.handleChange}
//                     value={formik.values.lastName}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="email"
//                     onChange={formik.handleChange}
//                     value={formik.values.email}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.password}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                     type={'password'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="phone"
//                     onChange={formik.handleChange}
//                     value={formik.values.phone}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'}
//                 />
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ "–¢–µ–ª–µ—Ñ–æ–Ω–∞"
// –ù–∞–π–¥–∏—Ç–µ –≤ –∫–æ–¥–µ –æ—à–∏–±–∫—É. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <form onSubmit={formik.handleSubmit}>                                 –û–¢–í–ï–¢:   name="phone"



// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName?: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//         },
//         validate: (values) => {
//             const errors: LoginFieldsType = {};
//             if (values.firstName.length < 5) {errors.firstName = 'Must be 5 characters or more'}
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <button type="submit" disabled={!(formik.isValid && formik.dirty)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ firstName —Å–∏–º–≤–æ–ª—ã. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—Å—è.
// –ó–∞–¥–∞—á–∞: –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ, –ª–∏–±–æ —Ä–∞–≤–Ω–∞ 5 —Å–∏–º–≤–æ–ª–∞–º.
// –¢.–µ. –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è firstName.
// ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'Must be 5 characters or more'
// ‚ùó –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è).

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return errors.firstName = 'Must be 5 characters or more'
// ‚ùó –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä yup) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ   –û–¢–í–ï–¢:  if (values.firstName.length < 5) {errors.firstName = 'Must be 5 characters or more'}




// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName: string
//     email: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             email: '',
//         },
//         validate: (values) => {
//             const errors: Partial<LoginFieldsType> = {};
//
//             if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
//                 errors.email = 'Invalid email address';
//             }
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     // –§—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±—à—Ç–æ—Ä–º –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ true –≤ JSX
//     const getTrue = () => {
//         return true
//     }
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}{...formik.getFieldProps('email')}/>
//                 {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–≥—Ä—É–∑–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º email, –Ω–æ –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ 46 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã:
// 1) –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ email –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// 2) –í–º–µ—Å—Ç–æ ERROR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—é.
// 3) –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –ø–æ–ª–µ–º.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {true && <div style={{color: 'red'}}>error.email</div>}
//                           –û–¢–í–ï–¢:  {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}



// import { useFormik } from 'formik';
// import React from 'react'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes, useNavigate } from 'react-router-dom'
// import axios from 'axios';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
//
// // Types
// type LoginFieldsType = {
//     email: string
//     password: string
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     login(data: LoginFieldsType) {
//         return instance.post('auth/login', data)
//     },
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     isLoggedIn: false,
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/SET-IS-LOGGED-IN':
//             return {...state, isLoggedIn: action.isLoggedIn}
//         case 'APP/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'APP/SET-ERROR':
//             return {...state, error: action.error}
//         default:
//             return state
//     }
// }
//
// // Actions
// const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
// type ActionsType =
//     | ReturnType<typeof setIsLoggedIn>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>
//
//
// // Thunk
// const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.login(values)
//         .then((res) => {
//             dispatch(setIsLoggedIn(true))
//             alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')
//         })
//         .catch((e) => {
//             dispatch(setError(e.response.data.errors))
//         })
//         .finally(() => {
//             dispatch(setLoadingAC(false))
//             setTimeout(() => {
//                 dispatch(setError(null))
//             }, 3000)
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>
// }
//
// // Profile
// export const Profile = () => {
//     return <h2>üòé Profile</h2>
// }
//
// // Login
// export const Login = () => {
//
//     const dispatch = useAppDispatch()
//     const navigate = useNavigate()
//
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//     const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//     const formik = useFormik({
//         initialValues: {
//             email: 'darrell@gmail.com',
//             password: '123',
//         },
//         onSubmit: values => {
//             dispatch(loginTC(values))
//         }
//     });
//
//     if (isLoggedIn) {
//         navigate ('/profile')
//     }
//     return (
//         <div>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             <form onSubmit={formik.handleSubmit}>
//                 <div>
//                     <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                            {...formik.getFieldProps('email')}/>
//                 </div>
//                 <div>
//                     <input type={'password'}
//                            placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                            {...formik.getFieldProps('password')}/>
//                 </div>
//                 <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
//             </form>
//         </div>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//             <Route path={'profile'} element={<Profile/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)
//

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó Email –∏ password –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è" –∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ alert —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
// –ó–∞–¥–∞—á–∞: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.

// –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  console.log('If login => redirect to profile')           –û–¢–í–ï–¢: if (isLoggedIn) {navigate ('/profile') }




// import React, { useEffect } from 'react'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import axios from 'axios';
//
// // Utils
// // console.log = () => {
// // };
//
// // Api
// const instance = axios.create({
//     baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'
// })
//
// const api = {
//     getUsers() {
//         /* 1 */  console.log('1')
//         return instance.get('users?pageSize=5&pageNumber=1')
//
//     }
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     users: [] as any[]
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/SET-USERS':
//             /* 2 */ console.log('2')
//             return {...state, users: action.users}
//         default:
//             return state
//     }
// }
//
// // Actions
// const setUsersAC = (users: any[]) => ({type: 'APP/SET-USERS', users} as const)
// type ActionsType = ReturnType<typeof setUsersAC>
//
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch) => {
//     /* 3 */console.log('3')
//     api.getUsers()
//         .then((res) => {
//             /* 4 */console.log('4')
//             dispatch(setUsersAC(res.data.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Login
// export const Login = () => {
//     const users = useAppSelector(state => state.app.users)
//     /* 5 */ console.log('5')
//
//     return (
//         <div>
//             {/* 6 */}
//             {users.map((u) => <p key={u.id}>{u.email}</p>)}
//             <h1>–í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ
//                 —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å
//                 –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
//             </h1>
//         </div>
//     );
// }
//
// // App
// export const App = () => {
//     /* 7 */console.log('7')
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         /* 8 */console.log('8')
//         dispatch(getUsersTC())
//     }, [])
//     /* 9 */console.log('9')
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 11 —á–∏—Å–µ–ª.
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1 2 3 4 5 6 7 8 9 1 2                    –û–¢–í–ï–¢: 7 9 5 6 8 3 1 4 2 5 6



// import React, { useEffect } from 'react'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import axios from 'axios';
//
//
// // Utils
// // console.log = () => {
// // };
//
// // Api
// const instance = axios.create({
//     // baseURL: 'xxx'
//     baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'
// })
//
// const api = {
//     getUsers() {
//         // return instance.get('xxx')
//         return instance.get('users?pageSize=5&pageNumber=1')
//     }
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     users: [] as any[]
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/SET-USERS':
//             /* 1 */console.log('1')
//             return {...state, users: action.users}
//         case 'APP/IS-LOADING':
//             /* 2 */console.log('2')
//             return {...state, isLoading: action.isLoading}
//         default:
//             return state
//     }
// }
//
// // Actions
// const setUsersAC = (users: any[]) => ({type: 'APP/SET-USERS', users} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// type ActionsType = | ReturnType<typeof setUsersAC> | ReturnType<typeof setLoadingAC>
//
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch) => {
//     /* 3 */console.log('3')
//     dispatch(setLoadingAC(true))
//     api.getUsers()
//         .then((res) => {
//             /* 4 */console.log('4')
//             dispatch(setLoadingAC(false))
//             /* 5 */console.log('5')
//             dispatch(setUsersAC(res.data.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     /* 6 */console.log('6')
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
//
// // Login
// export const Login = () => {
//     /* 7 */console.log('7')
//
//     const users = useAppSelector(state => state.app.users)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     return (
//         <div>
//             {isLoading && <Loader/>}
//             {users.map((u) => <p key={u.id}>{u.email}</p>)}
//             <h1>–í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ
//                 —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å
//                 –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
//             </h1>
//         </div>
//     );
// }
//
// // App
// export const App = () => {
//     /* 8 */console.log('8')
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         /* 9 */console.log('9')
//         dispatch(getUsersTC())
//     }, [])
//
//     /* 10 */console.log('10')
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 13 —á–∏—Å–µ–ª.
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1 2 3 4 5 6 7 8 9 10 1 2 3             –û–¢–í–ï–¢: 8 10 7 9 3 2 7 6 4 2 5 1 7


// _______________________________________________________________________________________________________________________
//                                                     –ü–Ø–¢–ù–ò–¶–ê –≠–ö–ó–ê–ú–ï–ù 1


// import React, { ChangeEvent, useState } from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes, useNavigate } from 'react-router-dom'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios'
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
//
//
// // Types
// type LoginFieldsType = {
//     email: string
//     password: string
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     login(data: LoginFieldsType) {
//         return instance.post('auth/login', data)
//     },
// }
//
// // Reducer
// const initState = {isAuth: false}
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'SET_AUTH':
//             return {...state, isAuth: action.isAuth}
//         default:
//             return state
//     }
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setAuth = (isAuth: boolean) => ({type: 'SET_AUTH', isAuth} as const)
// type ActionsType = ReturnType<typeof setAuth>
//
//
// // Thunk
// const loginTC = (email: string, password: string): AppThunk => async (dispatch) => {
//     try {
//         await api.login({email, password})
//         dispatch(setAuth(true))
//     } catch (e: any) {
//         alert(`‚ùå ${e.response.data.errors} ‚ùå`)
//     }
// }
//
// // Components
// const Login = () => {
//     const isAuth = useAppSelector(state => state.app.isAuth)
//
//     const dispatch = useAppDispatch()
//
//     const navigate = useNavigate()
//
//     const [email, setEmail] = useState('darrell@gmail.com')
//     const [password, setPassword] = useState('123')
//
//     const changeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {
//         setEmail(e.target.value)
//     }
//
//     const changePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {
//         setPassword(e.target.value)
//     }
//
//     if (isAuth) {
//
//         navigate('/profile')
//     }
//
//     return (
//         <div>
//             <input
//                 type={'text'}
//                 value={email}
//                 onChange={changeEmailHandler}
//             />
//             <input
//                 type={'password'}
//                 value={password}
//                 onChange={changePasswordHandler}
//             />
//             <button
//                 onClick={() => { dispatch(loginTC(email,password))}}
//                 disabled={!email || !password}
//             >
//                 login
//             </button>
//         </div>
//     )
// }
//
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={'/'} element={<Login/>}/>
//             <Route path={'/profile'} element={<h2>üòé Profile</h2>}/>
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//     <BrowserRouter>
//         <Provider store={store}>
//             <App/>
//         </Provider>
//     </BrowserRouter>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó Email –∏ password –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
// –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è (–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å—Å—è –Ω–∞ Profile)
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: navigate('/profile')                       –û–¢–í–ï–¢  onClick={() => { dispatch(loginTC(email,password))}}





// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import {BrowserRouter, Route, Routes, useNavigate, useParams} from 'react-router-dom'
//
// const Login = () => {
//     const navigate = useNavigate()
//
//     useEffect(() => {
//         navigate('/secret/JIUzI1NiIsInR5cCI6IkpXVCJ9')
//     }, [])
//
//     return (
//         <div>Login</div>
//     )
// }
// const SecretToken = () => {
//     const {token} = useParams()
//
//     return (
//         <h1>ü¶æ token: {token}</h1>
//     )
// }
//
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={'/'} element={<Login/>}/>
//             <Route path={'/secret/:token'} element={<SecretToken/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//     <BrowserRouter>
//         <App/>
//     </BrowserRouter>
// );

// üìú–û–ø–∏—Å–∞–Ω–∏–µ:
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∞ 17 —Å—Ç—Ä–æ–∫–µ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è —Ç–æ–∫–µ–Ω.

//‚ùó–û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –±–µ–∑. –£—á—Ç–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const token = '123'                                              –û–¢–í–ï–¢  const {token} = useParams()



// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import { BrowserRouter, Navigate, Route, Routes, useNavigate } from 'react-router-dom'
// import axios from 'axios'
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     me() {
//         return instance.get('auth/me?delay=3')
//     },
// }
//
//
// // Reducer
// const initState = {
//     isInitialized: false,
//     isLoading: false,
//     isLoggedIn: false
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'SET_IS_INITIALIZED':
//             return {...state, isInitialized: action.isInitialized}
//         case 'SET_LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'SET_IS_LOGGED_IN':
//             return {...state, isLoggedIn: action.isLoggedIn}
//         default:
//             return state
//     }
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setIsInitialized = (isInitialized: boolean) => ({type: 'SET_IS_INITIALIZED', isInitialized} as const)
// const setLoading = (isLoading: boolean) => ({type: 'SET_LOADING', isLoading} as const)
// const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'SET_IS_LOGGED_IN', isLoggedIn} as const)
// type ActionsType =
//     | ReturnType<typeof setLoading>
//     | ReturnType<typeof setIsInitialized>
//     | ReturnType<typeof setIsLoggedIn>
//
// // Thunk
// const me = (): AppThunk => async (dispatch) => {
//     dispatch(setLoading(true))
//     api.me()
//         .then((res) => {
//             dispatch(setIsLoggedIn(true))
//         })
//         .finally(() => {
//             dispatch(setLoading(false))
//             dispatch(setIsInitialized(true))
//         })
//
// }
//
// // Components
// const Loader = () => <h2>üîò –ö—Ä—É—Ç–∏–ª–∫–∞...</h2>
//
// const Login = () => {
//     const isInitialized = useAppSelector(state => state.app.isInitialized)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//     const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//     if (isLoggedIn) {
//         return <Navigate to={'/'}/>
//     }
//
//     return <h2>üê£ Login</h2>
// }
// const Profile = () => {
//     const isInitialized = useAppSelector(state => state.app.isInitialized)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//     const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//     if (isLoading) {
//         return <Loader/>
//     }
//
//     if (!isLoggedIn) {
//         return <Login/>
//     }
//
//     return <h2>üòé Profile </h2>
// }
//
// export const App = () => {
//     const isInitialized = useAppSelector(state => state.app.isInitialized)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//     const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         dispatch(me())
//     }, [])
//
//     return (
//         <Routes>
//             <Route path={'/'} element={<Profile/>}/>
//             <Route path={'login'} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//     <BrowserRouter>
//         <Provider store={store}>
//             <App/>
//         </Provider>
//     </BrowserRouter>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã –≤–∏–¥–∏–º Login, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã Profile
// –ù–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ Login,
// –∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å Loader

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Loader/>
//

// –û–¢–í–ï–¢
// if (isLoading) {
//     return <Loader/>
// }


import ReactDOM from 'react-dom/client';
import React, { useEffect, useState } from 'react'
import { BrowserRouter, Route, Routes, useNavigate, useParams } from 'react-router-dom'

const newSum = 1000

const Login = () => {
    const navigate = useNavigate()

    useEffect(() => {
        navigate(`/balance/${newSum}`)
    }, [])

    return (
        <h1>Login</h1>
    )
}

const Balance = () => {
    const [balance, setBalance] = useState(500)

    const params = useParams()

    useEffect( ()=> {
        if (params.bonus) {
            setBalance(balance + newSum)
            // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
        }
    },[] )

    return (
        <h1>üíµ balance: {balance}</h1>
    )
}

export const Bank = () => {
    return (
        <Routes>
            <Route path={'/'} element={<Login/>}/>
            <Route path={'/balance/:bonus'} element={<Balance/>}/>
        </Routes>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
    <BrowserRouter>
        <Bank/>
    </BrowserRouter>
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–Ω—ã–π 500.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ XXX –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥,
// –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏—Ç—Å—è –Ω–∞ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Ä–æ—É—Ç–µ.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: balance = newSum                 –û–¢–í–ï–¢          setBalance(balance + newSum)



// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes, useNavigate, useParams } from 'react-router-dom'
// import React from 'react'
//
// type UserType = {
//     id: number
//     name: string
//     avatar: string
//     age: number
//     address: string
// }
//
// const users: UserType[] = [
//     {
//         id: 1,
//         name: 'my Name',
//         age: 32,
//         avatar: '‚Äî‡∏Ö/·ê†.Ã´ .·êü\\‡∏Ö‚Äî',
//         address: 'my Address'
//     },
//     {
//         id: 2,
//         name: 'John',
//         age: 22,
//         avatar: ':)',
//         address: 'California'
//     },
//     {
//         id: 3,
//         name: 'Mike',
//         age: 18,
//         avatar: '^._.^',
//         address: 'New York'
//     },
//     {
//         id: 4,
//         name: 'Emma',
//         age: 38,
//         avatar: '/·ê†-Íûà-·êü\\',
//         address: 'Washington'
//     },
// ]
//
// const StartPage = () => {
//     const navigate = useNavigate()
//     const friends = users.filter(u => u.id !== 1)
//
//     const mappedFriends = friends.map((f, i) => {
//         const go = () => {
//             navigate(`/friend/${f.id}`)
//         }
//
//         return (
//             <div key={i} onClick={go} style={{paddingLeft: 24, color: 'blue', cursor: 'pointer'}}>
//                 {f.name}, {f.age}
//             </div>
//         )
//     })
//
//     return (
//         <div>
//             <h2>üôÇ My profile</h2>
//             <Profile userId={1}/>
//             <hr/>
//             <h2>üë™ Friends</h2>
//             {mappedFriends}
//         </div>
//     )
// }
// const Profile: React.FC<{ userId?: number }> = ({userId}) => {
//     const {id} = useParams<{ id: string }>()
//     const user = users.find(u => u.id === +(id || userId || 0))
//
//     return (
//         <div>
//             <div>
//                 <b>avatar</b> {user?.avatar}
//             </div>
//             <div>
//                 <div><b>name</b>: {user?.name}</div>
//                 <div><b>age</b>: {user?.age}</div>
//                 <div><b>address</b>: {user?.address}</div>
//             </div>
//         </div>
//     )
// }
//
// export const Friends = () => {
//     return (
//         <Routes>
//             <Route path={'/'} element={<StartPage/>}/>
//             <Route path={`friend/:id`} element={<Profile/>}/>
//             <Route path={'*'} element={<div>‚ùå404 Page Not Found‚ùå</div>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//     <BrowserRouter>
//         <Friends/>
//     </BrowserRouter>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.
// –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤–∏–¥–∏–º ‚ùå404 Page Not Found‚ùå
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä—É–≥–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Profile userId={4}/>



// import ReactDOM from 'react-dom/client';
// import React, { useEffect, useState } from 'react'
//
// export const Mining = () => {
//     const [btc, setBtc] = useState(0)
//
//     useEffect(() => {
//         const prevState = setInterval(() => {
//             setBtc (btc + 1)
//         }, 1000)
//
//         return () => {
//             clearInterval(prevState)
//         }
//     }, [btc])
//
//     return (
//         <h1>ü™ô BTC: {btc}</h1>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Mining/>);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞–º–∞–π–Ω–∏—Ç—å –±–∏—Ç–∫–æ–∏–Ω–æ–≤.
// –ß—Ç–æ-—Ç–æ –Ω–µ –º–∞–π–Ω—è—Ç—Å—è üò•.
// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX —á—Ç–æ–±—ã –±–∏—Ç–∫–æ–∏–Ω—ã –º–∞–π–Ω–∏–ª–∏—Å—å (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏–±–∞–≤–ª—è–ª—Å—è 1 –±–∏—Ç–∫–æ–∏–Ω) ?
// ‚ùó–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ prevState

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: btc = 1000000                                –û–¢–í–ï–¢ setBtc (btc + 1)



// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// export const App = () => {
//     return (
//         <div>
//             <h2>–î–ª—è —á–µ–≥–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ .gitignore ?</h2>
//             <ul>
//                 <li>1 - –ß—Ç–æ–±—ã git —É–¥–∞–ª—è–ª –∏—Ö –∏—Å—Ç–æ—Ä–∏—é, —Ö—Ä–∞–Ω—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é</li>
//                 <li>2 - –ß—Ç–æ–±—ã git –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ —Ñ–∞–π–ª–∞–º —É–≤–µ–¥–æ–º–ª—è–ª –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏</li>
//                 <li>3 - –ß—Ç–æ–±—ã git –Ω–µ —Å–ª–µ–¥–∏–ª –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö</li>
//                 <li>4 - –§–∞–π–ª .gitignore –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, —Ç.–∫. –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ–ª–∂–Ω—ã
//                     –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∏–∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –≤ .gitignore –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
//                 </li>
//                 <li>5 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//             </ul>
//         </div>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –î–ª—è —á–µ–≥–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ .gitignore ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1                           –û–¢–í–ï–¢ 3



// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// export const App = () => {
//     return (
//         <div>
//             <h2>–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º login –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ–µ ?</h2>
//         </div>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º login –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ–µ ?

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: git create login                    –û–¢–í–ï–¢   git checkout -b login